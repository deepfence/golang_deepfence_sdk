/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the ModelUserRegisterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUserRegisterRequest{}

// ModelUserRegisterRequest struct for ModelUserRegisterRequest
type ModelUserRegisterRequest struct {
	Company *string `json:"company,omitempty"`
	ConsoleUrl *string `json:"console_url,omitempty"`
	Email *string `json:"email,omitempty"`
	FirstName *string `json:"first_name,omitempty"`
	IsTemporaryPassword *bool `json:"is_temporary_password,omitempty"`
	LastName *string `json:"last_name,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewModelUserRegisterRequest instantiates a new ModelUserRegisterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUserRegisterRequest() *ModelUserRegisterRequest {
	this := ModelUserRegisterRequest{}
	return &this
}

// NewModelUserRegisterRequestWithDefaults instantiates a new ModelUserRegisterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUserRegisterRequestWithDefaults() *ModelUserRegisterRequest {
	this := ModelUserRegisterRequest{}
	return &this
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *ModelUserRegisterRequest) GetCompany() string {
	if o == nil || isNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserRegisterRequest) GetCompanyOk() (*string, bool) {
	if o == nil || isNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *ModelUserRegisterRequest) HasCompany() bool {
	if o != nil && !isNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *ModelUserRegisterRequest) SetCompany(v string) {
	o.Company = &v
}

// GetConsoleUrl returns the ConsoleUrl field value if set, zero value otherwise.
func (o *ModelUserRegisterRequest) GetConsoleUrl() string {
	if o == nil || isNil(o.ConsoleUrl) {
		var ret string
		return ret
	}
	return *o.ConsoleUrl
}

// GetConsoleUrlOk returns a tuple with the ConsoleUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserRegisterRequest) GetConsoleUrlOk() (*string, bool) {
	if o == nil || isNil(o.ConsoleUrl) {
		return nil, false
	}
	return o.ConsoleUrl, true
}

// HasConsoleUrl returns a boolean if a field has been set.
func (o *ModelUserRegisterRequest) HasConsoleUrl() bool {
	if o != nil && !isNil(o.ConsoleUrl) {
		return true
	}

	return false
}

// SetConsoleUrl gets a reference to the given string and assigns it to the ConsoleUrl field.
func (o *ModelUserRegisterRequest) SetConsoleUrl(v string) {
	o.ConsoleUrl = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ModelUserRegisterRequest) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserRegisterRequest) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ModelUserRegisterRequest) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ModelUserRegisterRequest) SetEmail(v string) {
	o.Email = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *ModelUserRegisterRequest) GetFirstName() string {
	if o == nil || isNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserRegisterRequest) GetFirstNameOk() (*string, bool) {
	if o == nil || isNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *ModelUserRegisterRequest) HasFirstName() bool {
	if o != nil && !isNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *ModelUserRegisterRequest) SetFirstName(v string) {
	o.FirstName = &v
}

// GetIsTemporaryPassword returns the IsTemporaryPassword field value if set, zero value otherwise.
func (o *ModelUserRegisterRequest) GetIsTemporaryPassword() bool {
	if o == nil || isNil(o.IsTemporaryPassword) {
		var ret bool
		return ret
	}
	return *o.IsTemporaryPassword
}

// GetIsTemporaryPasswordOk returns a tuple with the IsTemporaryPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserRegisterRequest) GetIsTemporaryPasswordOk() (*bool, bool) {
	if o == nil || isNil(o.IsTemporaryPassword) {
		return nil, false
	}
	return o.IsTemporaryPassword, true
}

// HasIsTemporaryPassword returns a boolean if a field has been set.
func (o *ModelUserRegisterRequest) HasIsTemporaryPassword() bool {
	if o != nil && !isNil(o.IsTemporaryPassword) {
		return true
	}

	return false
}

// SetIsTemporaryPassword gets a reference to the given bool and assigns it to the IsTemporaryPassword field.
func (o *ModelUserRegisterRequest) SetIsTemporaryPassword(v bool) {
	o.IsTemporaryPassword = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *ModelUserRegisterRequest) GetLastName() string {
	if o == nil || isNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserRegisterRequest) GetLastNameOk() (*string, bool) {
	if o == nil || isNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *ModelUserRegisterRequest) HasLastName() bool {
	if o != nil && !isNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *ModelUserRegisterRequest) SetLastName(v string) {
	o.LastName = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ModelUserRegisterRequest) GetPassword() string {
	if o == nil || isNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserRegisterRequest) GetPasswordOk() (*string, bool) {
	if o == nil || isNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ModelUserRegisterRequest) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ModelUserRegisterRequest) SetPassword(v string) {
	o.Password = &v
}

func (o ModelUserRegisterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUserRegisterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !isNil(o.ConsoleUrl) {
		toSerialize["console_url"] = o.ConsoleUrl
	}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !isNil(o.IsTemporaryPassword) {
		toSerialize["is_temporary_password"] = o.IsTemporaryPassword
	}
	if !isNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !isNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableModelUserRegisterRequest struct {
	value *ModelUserRegisterRequest
	isSet bool
}

func (v NullableModelUserRegisterRequest) Get() *ModelUserRegisterRequest {
	return v.value
}

func (v *NullableModelUserRegisterRequest) Set(val *ModelUserRegisterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUserRegisterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUserRegisterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUserRegisterRequest(val *ModelUserRegisterRequest) *NullableModelUserRegisterRequest {
	return &NullableModelUserRegisterRequest{value: val, isSet: true}
}

func (v NullableModelUserRegisterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUserRegisterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


