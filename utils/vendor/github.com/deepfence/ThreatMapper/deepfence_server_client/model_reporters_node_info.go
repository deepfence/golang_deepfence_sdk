/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the ReportersNodeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportersNodeInfo{}

// ReportersNodeInfo struct for ReportersNodeInfo
type ReportersNodeInfo struct {
	ComplianceCount *int32 `json:"compliance_count,omitempty"`
	ComplianceScanId *string `json:"compliance_scan_id,omitempty"`
	ImageName *string `json:"image_name,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeId *string `json:"node_id,omitempty"`
	SecretsCount *int32 `json:"secrets_count,omitempty"`
	SecretsScanId *string `json:"secrets_scan_id,omitempty"`
	VulnerabilityCount *int32 `json:"vulnerability_count,omitempty"`
	VulnerabilityScanId *string `json:"vulnerability_scan_id,omitempty"`
}

// NewReportersNodeInfo instantiates a new ReportersNodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportersNodeInfo() *ReportersNodeInfo {
	this := ReportersNodeInfo{}
	return &this
}

// NewReportersNodeInfoWithDefaults instantiates a new ReportersNodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportersNodeInfoWithDefaults() *ReportersNodeInfo {
	this := ReportersNodeInfo{}
	return &this
}

// GetComplianceCount returns the ComplianceCount field value if set, zero value otherwise.
func (o *ReportersNodeInfo) GetComplianceCount() int32 {
	if o == nil || isNil(o.ComplianceCount) {
		var ret int32
		return ret
	}
	return *o.ComplianceCount
}

// GetComplianceCountOk returns a tuple with the ComplianceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportersNodeInfo) GetComplianceCountOk() (*int32, bool) {
	if o == nil || isNil(o.ComplianceCount) {
		return nil, false
	}
	return o.ComplianceCount, true
}

// HasComplianceCount returns a boolean if a field has been set.
func (o *ReportersNodeInfo) HasComplianceCount() bool {
	if o != nil && !isNil(o.ComplianceCount) {
		return true
	}

	return false
}

// SetComplianceCount gets a reference to the given int32 and assigns it to the ComplianceCount field.
func (o *ReportersNodeInfo) SetComplianceCount(v int32) {
	o.ComplianceCount = &v
}

// GetComplianceScanId returns the ComplianceScanId field value if set, zero value otherwise.
func (o *ReportersNodeInfo) GetComplianceScanId() string {
	if o == nil || isNil(o.ComplianceScanId) {
		var ret string
		return ret
	}
	return *o.ComplianceScanId
}

// GetComplianceScanIdOk returns a tuple with the ComplianceScanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportersNodeInfo) GetComplianceScanIdOk() (*string, bool) {
	if o == nil || isNil(o.ComplianceScanId) {
		return nil, false
	}
	return o.ComplianceScanId, true
}

// HasComplianceScanId returns a boolean if a field has been set.
func (o *ReportersNodeInfo) HasComplianceScanId() bool {
	if o != nil && !isNil(o.ComplianceScanId) {
		return true
	}

	return false
}

// SetComplianceScanId gets a reference to the given string and assigns it to the ComplianceScanId field.
func (o *ReportersNodeInfo) SetComplianceScanId(v string) {
	o.ComplianceScanId = &v
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *ReportersNodeInfo) GetImageName() string {
	if o == nil || isNil(o.ImageName) {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportersNodeInfo) GetImageNameOk() (*string, bool) {
	if o == nil || isNil(o.ImageName) {
		return nil, false
	}
	return o.ImageName, true
}

// HasImageName returns a boolean if a field has been set.
func (o *ReportersNodeInfo) HasImageName() bool {
	if o != nil && !isNil(o.ImageName) {
		return true
	}

	return false
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *ReportersNodeInfo) SetImageName(v string) {
	o.ImageName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReportersNodeInfo) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportersNodeInfo) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReportersNodeInfo) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReportersNodeInfo) SetName(v string) {
	o.Name = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *ReportersNodeInfo) GetNodeId() string {
	if o == nil || isNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportersNodeInfo) GetNodeIdOk() (*string, bool) {
	if o == nil || isNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *ReportersNodeInfo) HasNodeId() bool {
	if o != nil && !isNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *ReportersNodeInfo) SetNodeId(v string) {
	o.NodeId = &v
}

// GetSecretsCount returns the SecretsCount field value if set, zero value otherwise.
func (o *ReportersNodeInfo) GetSecretsCount() int32 {
	if o == nil || isNil(o.SecretsCount) {
		var ret int32
		return ret
	}
	return *o.SecretsCount
}

// GetSecretsCountOk returns a tuple with the SecretsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportersNodeInfo) GetSecretsCountOk() (*int32, bool) {
	if o == nil || isNil(o.SecretsCount) {
		return nil, false
	}
	return o.SecretsCount, true
}

// HasSecretsCount returns a boolean if a field has been set.
func (o *ReportersNodeInfo) HasSecretsCount() bool {
	if o != nil && !isNil(o.SecretsCount) {
		return true
	}

	return false
}

// SetSecretsCount gets a reference to the given int32 and assigns it to the SecretsCount field.
func (o *ReportersNodeInfo) SetSecretsCount(v int32) {
	o.SecretsCount = &v
}

// GetSecretsScanId returns the SecretsScanId field value if set, zero value otherwise.
func (o *ReportersNodeInfo) GetSecretsScanId() string {
	if o == nil || isNil(o.SecretsScanId) {
		var ret string
		return ret
	}
	return *o.SecretsScanId
}

// GetSecretsScanIdOk returns a tuple with the SecretsScanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportersNodeInfo) GetSecretsScanIdOk() (*string, bool) {
	if o == nil || isNil(o.SecretsScanId) {
		return nil, false
	}
	return o.SecretsScanId, true
}

// HasSecretsScanId returns a boolean if a field has been set.
func (o *ReportersNodeInfo) HasSecretsScanId() bool {
	if o != nil && !isNil(o.SecretsScanId) {
		return true
	}

	return false
}

// SetSecretsScanId gets a reference to the given string and assigns it to the SecretsScanId field.
func (o *ReportersNodeInfo) SetSecretsScanId(v string) {
	o.SecretsScanId = &v
}

// GetVulnerabilityCount returns the VulnerabilityCount field value if set, zero value otherwise.
func (o *ReportersNodeInfo) GetVulnerabilityCount() int32 {
	if o == nil || isNil(o.VulnerabilityCount) {
		var ret int32
		return ret
	}
	return *o.VulnerabilityCount
}

// GetVulnerabilityCountOk returns a tuple with the VulnerabilityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportersNodeInfo) GetVulnerabilityCountOk() (*int32, bool) {
	if o == nil || isNil(o.VulnerabilityCount) {
		return nil, false
	}
	return o.VulnerabilityCount, true
}

// HasVulnerabilityCount returns a boolean if a field has been set.
func (o *ReportersNodeInfo) HasVulnerabilityCount() bool {
	if o != nil && !isNil(o.VulnerabilityCount) {
		return true
	}

	return false
}

// SetVulnerabilityCount gets a reference to the given int32 and assigns it to the VulnerabilityCount field.
func (o *ReportersNodeInfo) SetVulnerabilityCount(v int32) {
	o.VulnerabilityCount = &v
}

// GetVulnerabilityScanId returns the VulnerabilityScanId field value if set, zero value otherwise.
func (o *ReportersNodeInfo) GetVulnerabilityScanId() string {
	if o == nil || isNil(o.VulnerabilityScanId) {
		var ret string
		return ret
	}
	return *o.VulnerabilityScanId
}

// GetVulnerabilityScanIdOk returns a tuple with the VulnerabilityScanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportersNodeInfo) GetVulnerabilityScanIdOk() (*string, bool) {
	if o == nil || isNil(o.VulnerabilityScanId) {
		return nil, false
	}
	return o.VulnerabilityScanId, true
}

// HasVulnerabilityScanId returns a boolean if a field has been set.
func (o *ReportersNodeInfo) HasVulnerabilityScanId() bool {
	if o != nil && !isNil(o.VulnerabilityScanId) {
		return true
	}

	return false
}

// SetVulnerabilityScanId gets a reference to the given string and assigns it to the VulnerabilityScanId field.
func (o *ReportersNodeInfo) SetVulnerabilityScanId(v string) {
	o.VulnerabilityScanId = &v
}

func (o ReportersNodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportersNodeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ComplianceCount) {
		toSerialize["compliance_count"] = o.ComplianceCount
	}
	if !isNil(o.ComplianceScanId) {
		toSerialize["compliance_scan_id"] = o.ComplianceScanId
	}
	if !isNil(o.ImageName) {
		toSerialize["image_name"] = o.ImageName
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.NodeId) {
		toSerialize["node_id"] = o.NodeId
	}
	if !isNil(o.SecretsCount) {
		toSerialize["secrets_count"] = o.SecretsCount
	}
	if !isNil(o.SecretsScanId) {
		toSerialize["secrets_scan_id"] = o.SecretsScanId
	}
	if !isNil(o.VulnerabilityCount) {
		toSerialize["vulnerability_count"] = o.VulnerabilityCount
	}
	if !isNil(o.VulnerabilityScanId) {
		toSerialize["vulnerability_scan_id"] = o.VulnerabilityScanId
	}
	return toSerialize, nil
}

type NullableReportersNodeInfo struct {
	value *ReportersNodeInfo
	isSet bool
}

func (v NullableReportersNodeInfo) Get() *ReportersNodeInfo {
	return v.value
}

func (v *NullableReportersNodeInfo) Set(val *ReportersNodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableReportersNodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableReportersNodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportersNodeInfo(val *ReportersNodeInfo) *NullableReportersNodeInfo {
	return &NullableReportersNodeInfo{value: val, isSet: true}
}

func (v NullableReportersNodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportersNodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


