/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.2.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ModelPostureProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelPostureProvider{}

// ModelPostureProvider struct for ModelPostureProvider
type ModelPostureProvider struct {
	CompliancePercentage *float32 `json:"compliance_percentage,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeCount *int32 `json:"node_count,omitempty"`
	NodeCountInactive *int32 `json:"node_count_inactive,omitempty"`
	NodeLabel *string `json:"node_label,omitempty"`
	ResourceCount *int32 `json:"resource_count,omitempty"`
	ScanCount *int32 `json:"scan_count,omitempty"`
}

// NewModelPostureProvider instantiates a new ModelPostureProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelPostureProvider() *ModelPostureProvider {
	this := ModelPostureProvider{}
	return &this
}

// NewModelPostureProviderWithDefaults instantiates a new ModelPostureProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelPostureProviderWithDefaults() *ModelPostureProvider {
	this := ModelPostureProvider{}
	return &this
}

// GetCompliancePercentage returns the CompliancePercentage field value if set, zero value otherwise.
func (o *ModelPostureProvider) GetCompliancePercentage() float32 {
	if o == nil || IsNil(o.CompliancePercentage) {
		var ret float32
		return ret
	}
	return *o.CompliancePercentage
}

// GetCompliancePercentageOk returns a tuple with the CompliancePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelPostureProvider) GetCompliancePercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.CompliancePercentage) {
		return nil, false
	}
	return o.CompliancePercentage, true
}

// HasCompliancePercentage returns a boolean if a field has been set.
func (o *ModelPostureProvider) HasCompliancePercentage() bool {
	if o != nil && !IsNil(o.CompliancePercentage) {
		return true
	}

	return false
}

// SetCompliancePercentage gets a reference to the given float32 and assigns it to the CompliancePercentage field.
func (o *ModelPostureProvider) SetCompliancePercentage(v float32) {
	o.CompliancePercentage = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelPostureProvider) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelPostureProvider) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelPostureProvider) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelPostureProvider) SetName(v string) {
	o.Name = &v
}

// GetNodeCount returns the NodeCount field value if set, zero value otherwise.
func (o *ModelPostureProvider) GetNodeCount() int32 {
	if o == nil || IsNil(o.NodeCount) {
		var ret int32
		return ret
	}
	return *o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelPostureProvider) GetNodeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NodeCount) {
		return nil, false
	}
	return o.NodeCount, true
}

// HasNodeCount returns a boolean if a field has been set.
func (o *ModelPostureProvider) HasNodeCount() bool {
	if o != nil && !IsNil(o.NodeCount) {
		return true
	}

	return false
}

// SetNodeCount gets a reference to the given int32 and assigns it to the NodeCount field.
func (o *ModelPostureProvider) SetNodeCount(v int32) {
	o.NodeCount = &v
}

// GetNodeCountInactive returns the NodeCountInactive field value if set, zero value otherwise.
func (o *ModelPostureProvider) GetNodeCountInactive() int32 {
	if o == nil || IsNil(o.NodeCountInactive) {
		var ret int32
		return ret
	}
	return *o.NodeCountInactive
}

// GetNodeCountInactiveOk returns a tuple with the NodeCountInactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelPostureProvider) GetNodeCountInactiveOk() (*int32, bool) {
	if o == nil || IsNil(o.NodeCountInactive) {
		return nil, false
	}
	return o.NodeCountInactive, true
}

// HasNodeCountInactive returns a boolean if a field has been set.
func (o *ModelPostureProvider) HasNodeCountInactive() bool {
	if o != nil && !IsNil(o.NodeCountInactive) {
		return true
	}

	return false
}

// SetNodeCountInactive gets a reference to the given int32 and assigns it to the NodeCountInactive field.
func (o *ModelPostureProvider) SetNodeCountInactive(v int32) {
	o.NodeCountInactive = &v
}

// GetNodeLabel returns the NodeLabel field value if set, zero value otherwise.
func (o *ModelPostureProvider) GetNodeLabel() string {
	if o == nil || IsNil(o.NodeLabel) {
		var ret string
		return ret
	}
	return *o.NodeLabel
}

// GetNodeLabelOk returns a tuple with the NodeLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelPostureProvider) GetNodeLabelOk() (*string, bool) {
	if o == nil || IsNil(o.NodeLabel) {
		return nil, false
	}
	return o.NodeLabel, true
}

// HasNodeLabel returns a boolean if a field has been set.
func (o *ModelPostureProvider) HasNodeLabel() bool {
	if o != nil && !IsNil(o.NodeLabel) {
		return true
	}

	return false
}

// SetNodeLabel gets a reference to the given string and assigns it to the NodeLabel field.
func (o *ModelPostureProvider) SetNodeLabel(v string) {
	o.NodeLabel = &v
}

// GetResourceCount returns the ResourceCount field value if set, zero value otherwise.
func (o *ModelPostureProvider) GetResourceCount() int32 {
	if o == nil || IsNil(o.ResourceCount) {
		var ret int32
		return ret
	}
	return *o.ResourceCount
}

// GetResourceCountOk returns a tuple with the ResourceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelPostureProvider) GetResourceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ResourceCount) {
		return nil, false
	}
	return o.ResourceCount, true
}

// HasResourceCount returns a boolean if a field has been set.
func (o *ModelPostureProvider) HasResourceCount() bool {
	if o != nil && !IsNil(o.ResourceCount) {
		return true
	}

	return false
}

// SetResourceCount gets a reference to the given int32 and assigns it to the ResourceCount field.
func (o *ModelPostureProvider) SetResourceCount(v int32) {
	o.ResourceCount = &v
}

// GetScanCount returns the ScanCount field value if set, zero value otherwise.
func (o *ModelPostureProvider) GetScanCount() int32 {
	if o == nil || IsNil(o.ScanCount) {
		var ret int32
		return ret
	}
	return *o.ScanCount
}

// GetScanCountOk returns a tuple with the ScanCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelPostureProvider) GetScanCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ScanCount) {
		return nil, false
	}
	return o.ScanCount, true
}

// HasScanCount returns a boolean if a field has been set.
func (o *ModelPostureProvider) HasScanCount() bool {
	if o != nil && !IsNil(o.ScanCount) {
		return true
	}

	return false
}

// SetScanCount gets a reference to the given int32 and assigns it to the ScanCount field.
func (o *ModelPostureProvider) SetScanCount(v int32) {
	o.ScanCount = &v
}

func (o ModelPostureProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelPostureProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompliancePercentage) {
		toSerialize["compliance_percentage"] = o.CompliancePercentage
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NodeCount) {
		toSerialize["node_count"] = o.NodeCount
	}
	if !IsNil(o.NodeCountInactive) {
		toSerialize["node_count_inactive"] = o.NodeCountInactive
	}
	if !IsNil(o.NodeLabel) {
		toSerialize["node_label"] = o.NodeLabel
	}
	if !IsNil(o.ResourceCount) {
		toSerialize["resource_count"] = o.ResourceCount
	}
	if !IsNil(o.ScanCount) {
		toSerialize["scan_count"] = o.ScanCount
	}
	return toSerialize, nil
}

type NullableModelPostureProvider struct {
	value *ModelPostureProvider
	isSet bool
}

func (v NullableModelPostureProvider) Get() *ModelPostureProvider {
	return v.value
}

func (v *NullableModelPostureProvider) Set(val *ModelPostureProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableModelPostureProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableModelPostureProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelPostureProvider(val *ModelPostureProvider) *NullableModelPostureProvider {
	return &NullableModelPostureProvider{value: val, isSet: true}
}

func (v NullableModelPostureProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelPostureProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


