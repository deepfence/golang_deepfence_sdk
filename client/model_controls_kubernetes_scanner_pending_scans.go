/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ControlsKubernetesScannerPendingScans type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlsKubernetesScannerPendingScans{}

// ControlsKubernetesScannerPendingScans struct for ControlsKubernetesScannerPendingScans
type ControlsKubernetesScannerPendingScans struct {
	Refresh *string `json:"refresh,omitempty"`
	Scans *map[string]ControlsKubernetesScannerPendingScan `json:"scans,omitempty"`
}

// NewControlsKubernetesScannerPendingScans instantiates a new ControlsKubernetesScannerPendingScans object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlsKubernetesScannerPendingScans() *ControlsKubernetesScannerPendingScans {
	this := ControlsKubernetesScannerPendingScans{}
	return &this
}

// NewControlsKubernetesScannerPendingScansWithDefaults instantiates a new ControlsKubernetesScannerPendingScans object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlsKubernetesScannerPendingScansWithDefaults() *ControlsKubernetesScannerPendingScans {
	this := ControlsKubernetesScannerPendingScans{}
	return &this
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *ControlsKubernetesScannerPendingScans) GetRefresh() string {
	if o == nil || isNil(o.Refresh) {
		var ret string
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsKubernetesScannerPendingScans) GetRefreshOk() (*string, bool) {
	if o == nil || isNil(o.Refresh) {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *ControlsKubernetesScannerPendingScans) HasRefresh() bool {
	if o != nil && !isNil(o.Refresh) {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given string and assigns it to the Refresh field.
func (o *ControlsKubernetesScannerPendingScans) SetRefresh(v string) {
	o.Refresh = &v
}

// GetScans returns the Scans field value if set, zero value otherwise.
func (o *ControlsKubernetesScannerPendingScans) GetScans() map[string]ControlsKubernetesScannerPendingScan {
	if o == nil || isNil(o.Scans) {
		var ret map[string]ControlsKubernetesScannerPendingScan
		return ret
	}
	return *o.Scans
}

// GetScansOk returns a tuple with the Scans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlsKubernetesScannerPendingScans) GetScansOk() (*map[string]ControlsKubernetesScannerPendingScan, bool) {
	if o == nil || isNil(o.Scans) {
		return nil, false
	}
	return o.Scans, true
}

// HasScans returns a boolean if a field has been set.
func (o *ControlsKubernetesScannerPendingScans) HasScans() bool {
	if o != nil && !isNil(o.Scans) {
		return true
	}

	return false
}

// SetScans gets a reference to the given map[string]ControlsKubernetesScannerPendingScan and assigns it to the Scans field.
func (o *ControlsKubernetesScannerPendingScans) SetScans(v map[string]ControlsKubernetesScannerPendingScan) {
	o.Scans = &v
}

func (o ControlsKubernetesScannerPendingScans) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlsKubernetesScannerPendingScans) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Refresh) {
		toSerialize["refresh"] = o.Refresh
	}
	if !isNil(o.Scans) {
		toSerialize["scans"] = o.Scans
	}
	return toSerialize, nil
}

type NullableControlsKubernetesScannerPendingScans struct {
	value *ControlsKubernetesScannerPendingScans
	isSet bool
}

func (v NullableControlsKubernetesScannerPendingScans) Get() *ControlsKubernetesScannerPendingScans {
	return v.value
}

func (v *NullableControlsKubernetesScannerPendingScans) Set(val *ControlsKubernetesScannerPendingScans) {
	v.value = val
	v.isSet = true
}

func (v NullableControlsKubernetesScannerPendingScans) IsSet() bool {
	return v.isSet
}

func (v *NullableControlsKubernetesScannerPendingScans) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlsKubernetesScannerPendingScans(val *ControlsKubernetesScannerPendingScans) *NullableControlsKubernetesScannerPendingScans {
	return &NullableControlsKubernetesScannerPendingScans{value: val, isSet: true}
}

func (v NullableControlsKubernetesScannerPendingScans) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlsKubernetesScannerPendingScans) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


