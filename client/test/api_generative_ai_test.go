/*
Deepfence ThreatMapper

Testing GenerativeAIAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/deepfence/golang_deepfence_sdk/client"
)

func Test_client_GenerativeAIAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GenerativeAIAPIService AddGenerativeAiIntegrationBedrock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GenerativeAIAPI.AddGenerativeAiIntegrationBedrock(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GenerativeAIAPIService AddGenerativeAiIntegrationOpenAI", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GenerativeAIAPI.AddGenerativeAiIntegrationOpenAI(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GenerativeAIAPIService AutoAddGenerativeAiIntegration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.GenerativeAIAPI.AutoAddGenerativeAiIntegration(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GenerativeAIAPIService DeleteGenerativeAiIntegration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationId string

		httpRes, err := apiClient.GenerativeAIAPI.DeleteGenerativeAiIntegration(context.Background(), integrationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GenerativeAIAPIService GenerativeAiIntegrationCloudPostureQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GenerativeAIAPI.GenerativeAiIntegrationCloudPostureQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GenerativeAIAPIService GenerativeAiIntegrationKubernetesPostureQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GenerativeAIAPI.GenerativeAiIntegrationKubernetesPostureQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GenerativeAIAPIService GenerativeAiIntegrationLinuxPostureQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GenerativeAIAPI.GenerativeAiIntegrationLinuxPostureQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GenerativeAIAPIService GenerativeAiIntegrationMalwareQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GenerativeAIAPI.GenerativeAiIntegrationMalwareQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GenerativeAIAPIService GenerativeAiIntegrationSecretQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GenerativeAIAPI.GenerativeAiIntegrationSecretQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GenerativeAIAPIService GenerativeAiIntegrationVulnerabilityQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GenerativeAIAPI.GenerativeAiIntegrationVulnerabilityQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GenerativeAIAPIService ListGenerativeAiIntegration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GenerativeAIAPI.ListGenerativeAiIntegration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GenerativeAIAPIService SetDefaultGenerativeAiIntegration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationId string

		httpRes, err := apiClient.GenerativeAIAPI.SetDefaultGenerativeAiIntegration(context.Background(), integrationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
