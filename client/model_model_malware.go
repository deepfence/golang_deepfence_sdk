/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.2.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelMalware type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMalware{}

// ModelMalware struct for ModelMalware
type ModelMalware struct {
	Author *string `json:"author,omitempty"`
	Class string `json:"class"`
	CompleteFilename string `json:"complete_filename"`
	Date *string `json:"date,omitempty"`
	Description *string `json:"description,omitempty"`
	FileSevScore int32 `json:"file_sev_score"`
	FileSeverity string `json:"file_severity"`
	Filetype *string `json:"filetype,omitempty"`
	ImageLayerId string `json:"image_layer_id"`
	Info *string `json:"info,omitempty"`
	Masked bool `json:"masked"`
	NodeId string `json:"node_id"`
	Resources []ModelBasicNode `json:"resources,omitempty"`
	RuleId string `json:"rule_id"`
	RuleName string `json:"rule_name"`
	SeverityScore *int32 `json:"severity_score,omitempty"`
	StringsToMatch []interface{} `json:"strings_to_match,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Version *string `json:"version,omitempty"`
}

type _ModelMalware ModelMalware

// NewModelMalware instantiates a new ModelMalware object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMalware(class string, completeFilename string, fileSevScore int32, fileSeverity string, imageLayerId string, masked bool, nodeId string, ruleId string, ruleName string) *ModelMalware {
	this := ModelMalware{}
	this.Class = class
	this.CompleteFilename = completeFilename
	this.FileSevScore = fileSevScore
	this.FileSeverity = fileSeverity
	this.ImageLayerId = imageLayerId
	this.Masked = masked
	this.NodeId = nodeId
	this.RuleId = ruleId
	this.RuleName = ruleName
	return &this
}

// NewModelMalwareWithDefaults instantiates a new ModelMalware object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMalwareWithDefaults() *ModelMalware {
	this := ModelMalware{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ModelMalware) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ModelMalware) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *ModelMalware) SetAuthor(v string) {
	o.Author = &v
}

// GetClass returns the Class field value
func (o *ModelMalware) GetClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *ModelMalware) SetClass(v string) {
	o.Class = v
}

// GetCompleteFilename returns the CompleteFilename field value
func (o *ModelMalware) GetCompleteFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompleteFilename
}

// GetCompleteFilenameOk returns a tuple with the CompleteFilename field value
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetCompleteFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompleteFilename, true
}

// SetCompleteFilename sets field value
func (o *ModelMalware) SetCompleteFilename(v string) {
	o.CompleteFilename = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ModelMalware) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ModelMalware) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ModelMalware) SetDate(v string) {
	o.Date = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelMalware) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelMalware) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelMalware) SetDescription(v string) {
	o.Description = &v
}

// GetFileSevScore returns the FileSevScore field value
func (o *ModelMalware) GetFileSevScore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FileSevScore
}

// GetFileSevScoreOk returns a tuple with the FileSevScore field value
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetFileSevScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileSevScore, true
}

// SetFileSevScore sets field value
func (o *ModelMalware) SetFileSevScore(v int32) {
	o.FileSevScore = v
}

// GetFileSeverity returns the FileSeverity field value
func (o *ModelMalware) GetFileSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileSeverity
}

// GetFileSeverityOk returns a tuple with the FileSeverity field value
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetFileSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileSeverity, true
}

// SetFileSeverity sets field value
func (o *ModelMalware) SetFileSeverity(v string) {
	o.FileSeverity = v
}

// GetFiletype returns the Filetype field value if set, zero value otherwise.
func (o *ModelMalware) GetFiletype() string {
	if o == nil || IsNil(o.Filetype) {
		var ret string
		return ret
	}
	return *o.Filetype
}

// GetFiletypeOk returns a tuple with the Filetype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetFiletypeOk() (*string, bool) {
	if o == nil || IsNil(o.Filetype) {
		return nil, false
	}
	return o.Filetype, true
}

// HasFiletype returns a boolean if a field has been set.
func (o *ModelMalware) HasFiletype() bool {
	if o != nil && !IsNil(o.Filetype) {
		return true
	}

	return false
}

// SetFiletype gets a reference to the given string and assigns it to the Filetype field.
func (o *ModelMalware) SetFiletype(v string) {
	o.Filetype = &v
}

// GetImageLayerId returns the ImageLayerId field value
func (o *ModelMalware) GetImageLayerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageLayerId
}

// GetImageLayerIdOk returns a tuple with the ImageLayerId field value
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetImageLayerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageLayerId, true
}

// SetImageLayerId sets field value
func (o *ModelMalware) SetImageLayerId(v string) {
	o.ImageLayerId = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ModelMalware) GetInfo() string {
	if o == nil || IsNil(o.Info) {
		var ret string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetInfoOk() (*string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ModelMalware) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given string and assigns it to the Info field.
func (o *ModelMalware) SetInfo(v string) {
	o.Info = &v
}

// GetMasked returns the Masked field value
func (o *ModelMalware) GetMasked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Masked
}

// GetMaskedOk returns a tuple with the Masked field value
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetMaskedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Masked, true
}

// SetMasked sets field value
func (o *ModelMalware) SetMasked(v bool) {
	o.Masked = v
}

// GetNodeId returns the NodeId field value
func (o *ModelMalware) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *ModelMalware) SetNodeId(v string) {
	o.NodeId = v
}

// GetResources returns the Resources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelMalware) GetResources() []ModelBasicNode {
	if o == nil {
		var ret []ModelBasicNode
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelMalware) GetResourcesOk() ([]ModelBasicNode, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ModelMalware) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []ModelBasicNode and assigns it to the Resources field.
func (o *ModelMalware) SetResources(v []ModelBasicNode) {
	o.Resources = v
}

// GetRuleId returns the RuleId field value
func (o *ModelMalware) GetRuleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetRuleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleId, true
}

// SetRuleId sets field value
func (o *ModelMalware) SetRuleId(v string) {
	o.RuleId = v
}

// GetRuleName returns the RuleName field value
func (o *ModelMalware) GetRuleName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetRuleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleName, true
}

// SetRuleName sets field value
func (o *ModelMalware) SetRuleName(v string) {
	o.RuleName = v
}

// GetSeverityScore returns the SeverityScore field value if set, zero value otherwise.
func (o *ModelMalware) GetSeverityScore() int32 {
	if o == nil || IsNil(o.SeverityScore) {
		var ret int32
		return ret
	}
	return *o.SeverityScore
}

// GetSeverityScoreOk returns a tuple with the SeverityScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetSeverityScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.SeverityScore) {
		return nil, false
	}
	return o.SeverityScore, true
}

// HasSeverityScore returns a boolean if a field has been set.
func (o *ModelMalware) HasSeverityScore() bool {
	if o != nil && !IsNil(o.SeverityScore) {
		return true
	}

	return false
}

// SetSeverityScore gets a reference to the given int32 and assigns it to the SeverityScore field.
func (o *ModelMalware) SetSeverityScore(v int32) {
	o.SeverityScore = &v
}

// GetStringsToMatch returns the StringsToMatch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelMalware) GetStringsToMatch() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}
	return o.StringsToMatch
}

// GetStringsToMatchOk returns a tuple with the StringsToMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelMalware) GetStringsToMatchOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.StringsToMatch) {
		return nil, false
	}
	return o.StringsToMatch, true
}

// HasStringsToMatch returns a boolean if a field has been set.
func (o *ModelMalware) HasStringsToMatch() bool {
	if o != nil && !IsNil(o.StringsToMatch) {
		return true
	}

	return false
}

// SetStringsToMatch gets a reference to the given []interface{} and assigns it to the StringsToMatch field.
func (o *ModelMalware) SetStringsToMatch(v []interface{}) {
	o.StringsToMatch = v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ModelMalware) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ModelMalware) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *ModelMalware) SetSummary(v string) {
	o.Summary = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ModelMalware) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalware) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ModelMalware) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ModelMalware) SetVersion(v string) {
	o.Version = &v
}

func (o ModelMalware) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMalware) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	toSerialize["class"] = o.Class
	toSerialize["complete_filename"] = o.CompleteFilename
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["file_sev_score"] = o.FileSevScore
	toSerialize["file_severity"] = o.FileSeverity
	if !IsNil(o.Filetype) {
		toSerialize["filetype"] = o.Filetype
	}
	toSerialize["image_layer_id"] = o.ImageLayerId
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	toSerialize["masked"] = o.Masked
	toSerialize["node_id"] = o.NodeId
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	toSerialize["rule_id"] = o.RuleId
	toSerialize["rule_name"] = o.RuleName
	if !IsNil(o.SeverityScore) {
		toSerialize["severity_score"] = o.SeverityScore
	}
	if o.StringsToMatch != nil {
		toSerialize["strings_to_match"] = o.StringsToMatch
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *ModelMalware) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"class",
		"complete_filename",
		"file_sev_score",
		"file_severity",
		"image_layer_id",
		"masked",
		"node_id",
		"rule_id",
		"rule_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelMalware := _ModelMalware{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelMalware)

	if err != nil {
		return err
	}

	*o = ModelMalware(varModelMalware)

	return err
}

type NullableModelMalware struct {
	value *ModelMalware
	isSet bool
}

func (v NullableModelMalware) Get() *ModelMalware {
	return v.value
}

func (v *NullableModelMalware) Set(val *ModelMalware) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMalware) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMalware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMalware(val *ModelMalware) *NullableModelMalware {
	return &NullableModelMalware{value: val, isSet: true}
}

func (v NullableModelMalware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMalware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


