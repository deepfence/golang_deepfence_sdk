/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the ModelComputeMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelComputeMetrics{}

// ModelComputeMetrics struct for ModelComputeMetrics
type ModelComputeMetrics struct {
	CpuPercent float32 `json:"cpu_percent"`
	MemoryMb float32 `json:"memory_mb"`
}

// NewModelComputeMetrics instantiates a new ModelComputeMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelComputeMetrics(cpuPercent float32, memoryMb float32) *ModelComputeMetrics {
	this := ModelComputeMetrics{}
	this.CpuPercent = cpuPercent
	this.MemoryMb = memoryMb
	return &this
}

// NewModelComputeMetricsWithDefaults instantiates a new ModelComputeMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelComputeMetricsWithDefaults() *ModelComputeMetrics {
	this := ModelComputeMetrics{}
	return &this
}

// GetCpuPercent returns the CpuPercent field value
func (o *ModelComputeMetrics) GetCpuPercent() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CpuPercent
}

// GetCpuPercentOk returns a tuple with the CpuPercent field value
// and a boolean to check if the value has been set.
func (o *ModelComputeMetrics) GetCpuPercentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CpuPercent, true
}

// SetCpuPercent sets field value
func (o *ModelComputeMetrics) SetCpuPercent(v float32) {
	o.CpuPercent = v
}

// GetMemoryMb returns the MemoryMb field value
func (o *ModelComputeMetrics) GetMemoryMb() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MemoryMb
}

// GetMemoryMbOk returns a tuple with the MemoryMb field value
// and a boolean to check if the value has been set.
func (o *ModelComputeMetrics) GetMemoryMbOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryMb, true
}

// SetMemoryMb sets field value
func (o *ModelComputeMetrics) SetMemoryMb(v float32) {
	o.MemoryMb = v
}

func (o ModelComputeMetrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelComputeMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cpu_percent"] = o.CpuPercent
	toSerialize["memory_mb"] = o.MemoryMb
	return toSerialize, nil
}

type NullableModelComputeMetrics struct {
	value *ModelComputeMetrics
	isSet bool
}

func (v NullableModelComputeMetrics) Get() *ModelComputeMetrics {
	return v.value
}

func (v *NullableModelComputeMetrics) Set(val *ModelComputeMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableModelComputeMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableModelComputeMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelComputeMetrics(val *ModelComputeMetrics) *NullableModelComputeMetrics {
	return &NullableModelComputeMetrics{value: val, isSet: true}
}

func (v NullableModelComputeMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelComputeMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


