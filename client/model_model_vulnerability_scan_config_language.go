/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ModelVulnerabilityScanConfigLanguage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelVulnerabilityScanConfigLanguage{}

// ModelVulnerabilityScanConfigLanguage struct for ModelVulnerabilityScanConfigLanguage
type ModelVulnerabilityScanConfigLanguage struct {
	Language string `json:"language"`
}

// NewModelVulnerabilityScanConfigLanguage instantiates a new ModelVulnerabilityScanConfigLanguage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelVulnerabilityScanConfigLanguage(language string) *ModelVulnerabilityScanConfigLanguage {
	this := ModelVulnerabilityScanConfigLanguage{}
	this.Language = language
	return &this
}

// NewModelVulnerabilityScanConfigLanguageWithDefaults instantiates a new ModelVulnerabilityScanConfigLanguage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelVulnerabilityScanConfigLanguageWithDefaults() *ModelVulnerabilityScanConfigLanguage {
	this := ModelVulnerabilityScanConfigLanguage{}
	return &this
}

// GetLanguage returns the Language field value
func (o *ModelVulnerabilityScanConfigLanguage) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *ModelVulnerabilityScanConfigLanguage) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *ModelVulnerabilityScanConfigLanguage) SetLanguage(v string) {
	o.Language = v
}

func (o ModelVulnerabilityScanConfigLanguage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelVulnerabilityScanConfigLanguage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["language"] = o.Language
	return toSerialize, nil
}

type NullableModelVulnerabilityScanConfigLanguage struct {
	value *ModelVulnerabilityScanConfigLanguage
	isSet bool
}

func (v NullableModelVulnerabilityScanConfigLanguage) Get() *ModelVulnerabilityScanConfigLanguage {
	return v.value
}

func (v *NullableModelVulnerabilityScanConfigLanguage) Set(val *ModelVulnerabilityScanConfigLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableModelVulnerabilityScanConfigLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableModelVulnerabilityScanConfigLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelVulnerabilityScanConfigLanguage(val *ModelVulnerabilityScanConfigLanguage) *NullableModelVulnerabilityScanConfigLanguage {
	return &NullableModelVulnerabilityScanConfigLanguage{value: val, isSet: true}
}

func (v NullableModelVulnerabilityScanConfigLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelVulnerabilityScanConfigLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


