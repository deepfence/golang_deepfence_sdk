/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the ReportersFieldsFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportersFieldsFilters{}

// ReportersFieldsFilters struct for ReportersFieldsFilters
type ReportersFieldsFilters struct {
	ContainsFilter ReportersContainsFilter `json:"contains_filter"`
}

// NewReportersFieldsFilters instantiates a new ReportersFieldsFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportersFieldsFilters(containsFilter ReportersContainsFilter) *ReportersFieldsFilters {
	this := ReportersFieldsFilters{}
	this.ContainsFilter = containsFilter
	return &this
}

// NewReportersFieldsFiltersWithDefaults instantiates a new ReportersFieldsFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportersFieldsFiltersWithDefaults() *ReportersFieldsFilters {
	this := ReportersFieldsFilters{}
	return &this
}

// GetContainsFilter returns the ContainsFilter field value
func (o *ReportersFieldsFilters) GetContainsFilter() ReportersContainsFilter {
	if o == nil {
		var ret ReportersContainsFilter
		return ret
	}

	return o.ContainsFilter
}

// GetContainsFilterOk returns a tuple with the ContainsFilter field value
// and a boolean to check if the value has been set.
func (o *ReportersFieldsFilters) GetContainsFilterOk() (*ReportersContainsFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainsFilter, true
}

// SetContainsFilter sets field value
func (o *ReportersFieldsFilters) SetContainsFilter(v ReportersContainsFilter) {
	o.ContainsFilter = v
}

func (o ReportersFieldsFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportersFieldsFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contains_filter"] = o.ContainsFilter
	return toSerialize, nil
}

type NullableReportersFieldsFilters struct {
	value *ReportersFieldsFilters
	isSet bool
}

func (v NullableReportersFieldsFilters) Get() *ReportersFieldsFilters {
	return v.value
}

func (v *NullableReportersFieldsFilters) Set(val *ReportersFieldsFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableReportersFieldsFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableReportersFieldsFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportersFieldsFilters(val *ReportersFieldsFilters) *NullableReportersFieldsFilters {
	return &NullableReportersFieldsFilters{value: val, isSet: true}
}

func (v NullableReportersFieldsFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportersFieldsFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


