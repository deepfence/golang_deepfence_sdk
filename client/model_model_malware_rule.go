/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.2.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelMalwareRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMalwareRule{}

// ModelMalwareRule struct for ModelMalwareRule
type ModelMalwareRule struct {
	Author *string `json:"author,omitempty"`
	Date *string `json:"date,omitempty"`
	Description *string `json:"description,omitempty"`
	FileSeverity *string `json:"file_severity,omitempty"`
	Filetype *string `json:"filetype,omitempty"`
	Info *string `json:"info,omitempty"`
	Masked bool `json:"masked"`
	Reference *string `json:"reference,omitempty"`
	RuleId *string `json:"rule_id,omitempty"`
	RuleName *string `json:"rule_name,omitempty"`
	UpdatedAt int32 `json:"updated_at"`
	Version *string `json:"version,omitempty"`
}

type _ModelMalwareRule ModelMalwareRule

// NewModelMalwareRule instantiates a new ModelMalwareRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMalwareRule(masked bool, updatedAt int32) *ModelMalwareRule {
	this := ModelMalwareRule{}
	this.Masked = masked
	this.UpdatedAt = updatedAt
	return &this
}

// NewModelMalwareRuleWithDefaults instantiates a new ModelMalwareRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMalwareRuleWithDefaults() *ModelMalwareRule {
	this := ModelMalwareRule{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ModelMalwareRule) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ModelMalwareRule) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *ModelMalwareRule) SetAuthor(v string) {
	o.Author = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ModelMalwareRule) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ModelMalwareRule) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ModelMalwareRule) SetDate(v string) {
	o.Date = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelMalwareRule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelMalwareRule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelMalwareRule) SetDescription(v string) {
	o.Description = &v
}

// GetFileSeverity returns the FileSeverity field value if set, zero value otherwise.
func (o *ModelMalwareRule) GetFileSeverity() string {
	if o == nil || IsNil(o.FileSeverity) {
		var ret string
		return ret
	}
	return *o.FileSeverity
}

// GetFileSeverityOk returns a tuple with the FileSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetFileSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.FileSeverity) {
		return nil, false
	}
	return o.FileSeverity, true
}

// HasFileSeverity returns a boolean if a field has been set.
func (o *ModelMalwareRule) HasFileSeverity() bool {
	if o != nil && !IsNil(o.FileSeverity) {
		return true
	}

	return false
}

// SetFileSeverity gets a reference to the given string and assigns it to the FileSeverity field.
func (o *ModelMalwareRule) SetFileSeverity(v string) {
	o.FileSeverity = &v
}

// GetFiletype returns the Filetype field value if set, zero value otherwise.
func (o *ModelMalwareRule) GetFiletype() string {
	if o == nil || IsNil(o.Filetype) {
		var ret string
		return ret
	}
	return *o.Filetype
}

// GetFiletypeOk returns a tuple with the Filetype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetFiletypeOk() (*string, bool) {
	if o == nil || IsNil(o.Filetype) {
		return nil, false
	}
	return o.Filetype, true
}

// HasFiletype returns a boolean if a field has been set.
func (o *ModelMalwareRule) HasFiletype() bool {
	if o != nil && !IsNil(o.Filetype) {
		return true
	}

	return false
}

// SetFiletype gets a reference to the given string and assigns it to the Filetype field.
func (o *ModelMalwareRule) SetFiletype(v string) {
	o.Filetype = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ModelMalwareRule) GetInfo() string {
	if o == nil || IsNil(o.Info) {
		var ret string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetInfoOk() (*string, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ModelMalwareRule) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given string and assigns it to the Info field.
func (o *ModelMalwareRule) SetInfo(v string) {
	o.Info = &v
}

// GetMasked returns the Masked field value
func (o *ModelMalwareRule) GetMasked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Masked
}

// GetMaskedOk returns a tuple with the Masked field value
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetMaskedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Masked, true
}

// SetMasked sets field value
func (o *ModelMalwareRule) SetMasked(v bool) {
	o.Masked = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *ModelMalwareRule) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *ModelMalwareRule) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *ModelMalwareRule) SetReference(v string) {
	o.Reference = &v
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *ModelMalwareRule) GetRuleId() string {
	if o == nil || IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *ModelMalwareRule) HasRuleId() bool {
	if o != nil && !IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *ModelMalwareRule) SetRuleId(v string) {
	o.RuleId = &v
}

// GetRuleName returns the RuleName field value if set, zero value otherwise.
func (o *ModelMalwareRule) GetRuleName() string {
	if o == nil || IsNil(o.RuleName) {
		var ret string
		return ret
	}
	return *o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetRuleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RuleName) {
		return nil, false
	}
	return o.RuleName, true
}

// HasRuleName returns a boolean if a field has been set.
func (o *ModelMalwareRule) HasRuleName() bool {
	if o != nil && !IsNil(o.RuleName) {
		return true
	}

	return false
}

// SetRuleName gets a reference to the given string and assigns it to the RuleName field.
func (o *ModelMalwareRule) SetRuleName(v string) {
	o.RuleName = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ModelMalwareRule) GetUpdatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetUpdatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ModelMalwareRule) SetUpdatedAt(v int32) {
	o.UpdatedAt = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ModelMalwareRule) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMalwareRule) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ModelMalwareRule) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ModelMalwareRule) SetVersion(v string) {
	o.Version = &v
}

func (o ModelMalwareRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMalwareRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FileSeverity) {
		toSerialize["file_severity"] = o.FileSeverity
	}
	if !IsNil(o.Filetype) {
		toSerialize["filetype"] = o.Filetype
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	toSerialize["masked"] = o.Masked
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.RuleId) {
		toSerialize["rule_id"] = o.RuleId
	}
	if !IsNil(o.RuleName) {
		toSerialize["rule_name"] = o.RuleName
	}
	toSerialize["updated_at"] = o.UpdatedAt
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *ModelMalwareRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"masked",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelMalwareRule := _ModelMalwareRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelMalwareRule)

	if err != nil {
		return err
	}

	*o = ModelMalwareRule(varModelMalwareRule)

	return err
}

type NullableModelMalwareRule struct {
	value *ModelMalwareRule
	isSet bool
}

func (v NullableModelMalwareRule) Get() *ModelMalwareRule {
	return v.value
}

func (v *NullableModelMalwareRule) Set(val *ModelMalwareRule) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMalwareRule) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMalwareRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMalwareRule(val *ModelMalwareRule) *NullableModelMalwareRule {
	return &NullableModelMalwareRule{value: val, isSet: true}
}

func (v NullableModelMalwareRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMalwareRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


