/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the ModelAgentImageMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelAgentImageMetadata{}

// ModelAgentImageMetadata struct for ModelAgentImageMetadata
type ModelAgentImageMetadata struct {
	ImageName string `json:"image_name"`
	ImageTag string `json:"image_tag"`
	Version string `json:"version"`
}

// NewModelAgentImageMetadata instantiates a new ModelAgentImageMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAgentImageMetadata(imageName string, imageTag string, version string) *ModelAgentImageMetadata {
	this := ModelAgentImageMetadata{}
	this.ImageName = imageName
	this.ImageTag = imageTag
	this.Version = version
	return &this
}

// NewModelAgentImageMetadataWithDefaults instantiates a new ModelAgentImageMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAgentImageMetadataWithDefaults() *ModelAgentImageMetadata {
	this := ModelAgentImageMetadata{}
	return &this
}

// GetImageName returns the ImageName field value
func (o *ModelAgentImageMetadata) GetImageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value
// and a boolean to check if the value has been set.
func (o *ModelAgentImageMetadata) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageName, true
}

// SetImageName sets field value
func (o *ModelAgentImageMetadata) SetImageName(v string) {
	o.ImageName = v
}

// GetImageTag returns the ImageTag field value
func (o *ModelAgentImageMetadata) GetImageTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageTag
}

// GetImageTagOk returns a tuple with the ImageTag field value
// and a boolean to check if the value has been set.
func (o *ModelAgentImageMetadata) GetImageTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageTag, true
}

// SetImageTag sets field value
func (o *ModelAgentImageMetadata) SetImageTag(v string) {
	o.ImageTag = v
}

// GetVersion returns the Version field value
func (o *ModelAgentImageMetadata) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ModelAgentImageMetadata) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ModelAgentImageMetadata) SetVersion(v string) {
	o.Version = v
}

func (o ModelAgentImageMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelAgentImageMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image_name"] = o.ImageName
	toSerialize["image_tag"] = o.ImageTag
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableModelAgentImageMetadata struct {
	value *ModelAgentImageMetadata
	isSet bool
}

func (v NullableModelAgentImageMetadata) Get() *ModelAgentImageMetadata {
	return v.value
}

func (v *NullableModelAgentImageMetadata) Set(val *ModelAgentImageMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAgentImageMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAgentImageMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAgentImageMetadata(val *ModelAgentImageMetadata) *NullableModelAgentImageMetadata {
	return &NullableModelAgentImageMetadata{value: val, isSet: true}
}

func (v NullableModelAgentImageMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAgentImageMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


