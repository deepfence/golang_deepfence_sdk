/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.2.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the IngestersComplianceStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestersComplianceStats{}

// IngestersComplianceStats struct for IngestersComplianceStats
type IngestersComplianceStats struct {
	Alarm *int32 `json:"alarm,omitempty"`
	CompliancePercentage *float32 `json:"compliance_percentage,omitempty"`
	Error *int32 `json:"error,omitempty"`
	Info *int32 `json:"info,omitempty"`
	Ok *int32 `json:"ok,omitempty"`
	Skip *int32 `json:"skip,omitempty"`
}

// NewIngestersComplianceStats instantiates a new IngestersComplianceStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestersComplianceStats() *IngestersComplianceStats {
	this := IngestersComplianceStats{}
	return &this
}

// NewIngestersComplianceStatsWithDefaults instantiates a new IngestersComplianceStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestersComplianceStatsWithDefaults() *IngestersComplianceStats {
	this := IngestersComplianceStats{}
	return &this
}

// GetAlarm returns the Alarm field value if set, zero value otherwise.
func (o *IngestersComplianceStats) GetAlarm() int32 {
	if o == nil || IsNil(o.Alarm) {
		var ret int32
		return ret
	}
	return *o.Alarm
}

// GetAlarmOk returns a tuple with the Alarm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersComplianceStats) GetAlarmOk() (*int32, bool) {
	if o == nil || IsNil(o.Alarm) {
		return nil, false
	}
	return o.Alarm, true
}

// HasAlarm returns a boolean if a field has been set.
func (o *IngestersComplianceStats) HasAlarm() bool {
	if o != nil && !IsNil(o.Alarm) {
		return true
	}

	return false
}

// SetAlarm gets a reference to the given int32 and assigns it to the Alarm field.
func (o *IngestersComplianceStats) SetAlarm(v int32) {
	o.Alarm = &v
}

// GetCompliancePercentage returns the CompliancePercentage field value if set, zero value otherwise.
func (o *IngestersComplianceStats) GetCompliancePercentage() float32 {
	if o == nil || IsNil(o.CompliancePercentage) {
		var ret float32
		return ret
	}
	return *o.CompliancePercentage
}

// GetCompliancePercentageOk returns a tuple with the CompliancePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersComplianceStats) GetCompliancePercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.CompliancePercentage) {
		return nil, false
	}
	return o.CompliancePercentage, true
}

// HasCompliancePercentage returns a boolean if a field has been set.
func (o *IngestersComplianceStats) HasCompliancePercentage() bool {
	if o != nil && !IsNil(o.CompliancePercentage) {
		return true
	}

	return false
}

// SetCompliancePercentage gets a reference to the given float32 and assigns it to the CompliancePercentage field.
func (o *IngestersComplianceStats) SetCompliancePercentage(v float32) {
	o.CompliancePercentage = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *IngestersComplianceStats) GetError() int32 {
	if o == nil || IsNil(o.Error) {
		var ret int32
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersComplianceStats) GetErrorOk() (*int32, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *IngestersComplianceStats) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given int32 and assigns it to the Error field.
func (o *IngestersComplianceStats) SetError(v int32) {
	o.Error = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *IngestersComplianceStats) GetInfo() int32 {
	if o == nil || IsNil(o.Info) {
		var ret int32
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersComplianceStats) GetInfoOk() (*int32, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *IngestersComplianceStats) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given int32 and assigns it to the Info field.
func (o *IngestersComplianceStats) SetInfo(v int32) {
	o.Info = &v
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *IngestersComplianceStats) GetOk() int32 {
	if o == nil || IsNil(o.Ok) {
		var ret int32
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersComplianceStats) GetOkOk() (*int32, bool) {
	if o == nil || IsNil(o.Ok) {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *IngestersComplianceStats) HasOk() bool {
	if o != nil && !IsNil(o.Ok) {
		return true
	}

	return false
}

// SetOk gets a reference to the given int32 and assigns it to the Ok field.
func (o *IngestersComplianceStats) SetOk(v int32) {
	o.Ok = &v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *IngestersComplianceStats) GetSkip() int32 {
	if o == nil || IsNil(o.Skip) {
		var ret int32
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersComplianceStats) GetSkipOk() (*int32, bool) {
	if o == nil || IsNil(o.Skip) {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *IngestersComplianceStats) HasSkip() bool {
	if o != nil && !IsNil(o.Skip) {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int32 and assigns it to the Skip field.
func (o *IngestersComplianceStats) SetSkip(v int32) {
	o.Skip = &v
}

func (o IngestersComplianceStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestersComplianceStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alarm) {
		toSerialize["alarm"] = o.Alarm
	}
	if !IsNil(o.CompliancePercentage) {
		toSerialize["compliance_percentage"] = o.CompliancePercentage
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.Ok) {
		toSerialize["ok"] = o.Ok
	}
	if !IsNil(o.Skip) {
		toSerialize["skip"] = o.Skip
	}
	return toSerialize, nil
}

type NullableIngestersComplianceStats struct {
	value *IngestersComplianceStats
	isSet bool
}

func (v NullableIngestersComplianceStats) Get() *IngestersComplianceStats {
	return v.value
}

func (v *NullableIngestersComplianceStats) Set(val *IngestersComplianceStats) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestersComplianceStats) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestersComplianceStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestersComplianceStats(val *IngestersComplianceStats) *NullableIngestersComplianceStats {
	return &NullableIngestersComplianceStats{value: val, isSet: true}
}

func (v NullableIngestersComplianceStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestersComplianceStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


