/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.2.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the IngestersVulnerability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestersVulnerability{}

// IngestersVulnerability struct for IngestersVulnerability
type IngestersVulnerability struct {
	CveAttackVector *string `json:"cve_attack_vector,omitempty"`
	CveCausedByPackage *string `json:"cve_caused_by_package,omitempty"`
	CveCausedByPackagePath *string `json:"cve_caused_by_package_path,omitempty"`
	CveContainerLayer *string `json:"cve_container_layer,omitempty"`
	CveCvssScore *float32 `json:"cve_cvss_score,omitempty"`
	CveDescription *string `json:"cve_description,omitempty"`
	CveFixedIn *string `json:"cve_fixed_in,omitempty"`
	CveId *string `json:"cve_id,omitempty"`
	CveLink *string `json:"cve_link,omitempty"`
	CveOverallScore *float32 `json:"cve_overall_score,omitempty"`
	CveSeverity *string `json:"cve_severity,omitempty"`
	CveType *string `json:"cve_type,omitempty"`
	ExploitPoc *string `json:"exploit_poc,omitempty"`
	ExploitabilityScore *int32 `json:"exploitability_score,omitempty"`
	HasLiveConnection *bool `json:"has_live_connection,omitempty"`
	InitExploitabilityScore *int32 `json:"init_exploitability_score,omitempty"`
	ParsedAttackVector *string `json:"parsed_attack_vector,omitempty"`
	ScanId *string `json:"scan_id,omitempty"`
	Urls []string `json:"urls,omitempty"`
}

// NewIngestersVulnerability instantiates a new IngestersVulnerability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestersVulnerability() *IngestersVulnerability {
	this := IngestersVulnerability{}
	return &this
}

// NewIngestersVulnerabilityWithDefaults instantiates a new IngestersVulnerability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestersVulnerabilityWithDefaults() *IngestersVulnerability {
	this := IngestersVulnerability{}
	return &this
}

// GetCveAttackVector returns the CveAttackVector field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveAttackVector() string {
	if o == nil || IsNil(o.CveAttackVector) {
		var ret string
		return ret
	}
	return *o.CveAttackVector
}

// GetCveAttackVectorOk returns a tuple with the CveAttackVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveAttackVectorOk() (*string, bool) {
	if o == nil || IsNil(o.CveAttackVector) {
		return nil, false
	}
	return o.CveAttackVector, true
}

// HasCveAttackVector returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveAttackVector() bool {
	if o != nil && !IsNil(o.CveAttackVector) {
		return true
	}

	return false
}

// SetCveAttackVector gets a reference to the given string and assigns it to the CveAttackVector field.
func (o *IngestersVulnerability) SetCveAttackVector(v string) {
	o.CveAttackVector = &v
}

// GetCveCausedByPackage returns the CveCausedByPackage field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveCausedByPackage() string {
	if o == nil || IsNil(o.CveCausedByPackage) {
		var ret string
		return ret
	}
	return *o.CveCausedByPackage
}

// GetCveCausedByPackageOk returns a tuple with the CveCausedByPackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveCausedByPackageOk() (*string, bool) {
	if o == nil || IsNil(o.CveCausedByPackage) {
		return nil, false
	}
	return o.CveCausedByPackage, true
}

// HasCveCausedByPackage returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveCausedByPackage() bool {
	if o != nil && !IsNil(o.CveCausedByPackage) {
		return true
	}

	return false
}

// SetCveCausedByPackage gets a reference to the given string and assigns it to the CveCausedByPackage field.
func (o *IngestersVulnerability) SetCveCausedByPackage(v string) {
	o.CveCausedByPackage = &v
}

// GetCveCausedByPackagePath returns the CveCausedByPackagePath field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveCausedByPackagePath() string {
	if o == nil || IsNil(o.CveCausedByPackagePath) {
		var ret string
		return ret
	}
	return *o.CveCausedByPackagePath
}

// GetCveCausedByPackagePathOk returns a tuple with the CveCausedByPackagePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveCausedByPackagePathOk() (*string, bool) {
	if o == nil || IsNil(o.CveCausedByPackagePath) {
		return nil, false
	}
	return o.CveCausedByPackagePath, true
}

// HasCveCausedByPackagePath returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveCausedByPackagePath() bool {
	if o != nil && !IsNil(o.CveCausedByPackagePath) {
		return true
	}

	return false
}

// SetCveCausedByPackagePath gets a reference to the given string and assigns it to the CveCausedByPackagePath field.
func (o *IngestersVulnerability) SetCveCausedByPackagePath(v string) {
	o.CveCausedByPackagePath = &v
}

// GetCveContainerLayer returns the CveContainerLayer field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveContainerLayer() string {
	if o == nil || IsNil(o.CveContainerLayer) {
		var ret string
		return ret
	}
	return *o.CveContainerLayer
}

// GetCveContainerLayerOk returns a tuple with the CveContainerLayer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveContainerLayerOk() (*string, bool) {
	if o == nil || IsNil(o.CveContainerLayer) {
		return nil, false
	}
	return o.CveContainerLayer, true
}

// HasCveContainerLayer returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveContainerLayer() bool {
	if o != nil && !IsNil(o.CveContainerLayer) {
		return true
	}

	return false
}

// SetCveContainerLayer gets a reference to the given string and assigns it to the CveContainerLayer field.
func (o *IngestersVulnerability) SetCveContainerLayer(v string) {
	o.CveContainerLayer = &v
}

// GetCveCvssScore returns the CveCvssScore field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveCvssScore() float32 {
	if o == nil || IsNil(o.CveCvssScore) {
		var ret float32
		return ret
	}
	return *o.CveCvssScore
}

// GetCveCvssScoreOk returns a tuple with the CveCvssScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveCvssScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.CveCvssScore) {
		return nil, false
	}
	return o.CveCvssScore, true
}

// HasCveCvssScore returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveCvssScore() bool {
	if o != nil && !IsNil(o.CveCvssScore) {
		return true
	}

	return false
}

// SetCveCvssScore gets a reference to the given float32 and assigns it to the CveCvssScore field.
func (o *IngestersVulnerability) SetCveCvssScore(v float32) {
	o.CveCvssScore = &v
}

// GetCveDescription returns the CveDescription field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveDescription() string {
	if o == nil || IsNil(o.CveDescription) {
		var ret string
		return ret
	}
	return *o.CveDescription
}

// GetCveDescriptionOk returns a tuple with the CveDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.CveDescription) {
		return nil, false
	}
	return o.CveDescription, true
}

// HasCveDescription returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveDescription() bool {
	if o != nil && !IsNil(o.CveDescription) {
		return true
	}

	return false
}

// SetCveDescription gets a reference to the given string and assigns it to the CveDescription field.
func (o *IngestersVulnerability) SetCveDescription(v string) {
	o.CveDescription = &v
}

// GetCveFixedIn returns the CveFixedIn field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveFixedIn() string {
	if o == nil || IsNil(o.CveFixedIn) {
		var ret string
		return ret
	}
	return *o.CveFixedIn
}

// GetCveFixedInOk returns a tuple with the CveFixedIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveFixedInOk() (*string, bool) {
	if o == nil || IsNil(o.CveFixedIn) {
		return nil, false
	}
	return o.CveFixedIn, true
}

// HasCveFixedIn returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveFixedIn() bool {
	if o != nil && !IsNil(o.CveFixedIn) {
		return true
	}

	return false
}

// SetCveFixedIn gets a reference to the given string and assigns it to the CveFixedIn field.
func (o *IngestersVulnerability) SetCveFixedIn(v string) {
	o.CveFixedIn = &v
}

// GetCveId returns the CveId field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveId() string {
	if o == nil || IsNil(o.CveId) {
		var ret string
		return ret
	}
	return *o.CveId
}

// GetCveIdOk returns a tuple with the CveId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveIdOk() (*string, bool) {
	if o == nil || IsNil(o.CveId) {
		return nil, false
	}
	return o.CveId, true
}

// HasCveId returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveId() bool {
	if o != nil && !IsNil(o.CveId) {
		return true
	}

	return false
}

// SetCveId gets a reference to the given string and assigns it to the CveId field.
func (o *IngestersVulnerability) SetCveId(v string) {
	o.CveId = &v
}

// GetCveLink returns the CveLink field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveLink() string {
	if o == nil || IsNil(o.CveLink) {
		var ret string
		return ret
	}
	return *o.CveLink
}

// GetCveLinkOk returns a tuple with the CveLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveLinkOk() (*string, bool) {
	if o == nil || IsNil(o.CveLink) {
		return nil, false
	}
	return o.CveLink, true
}

// HasCveLink returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveLink() bool {
	if o != nil && !IsNil(o.CveLink) {
		return true
	}

	return false
}

// SetCveLink gets a reference to the given string and assigns it to the CveLink field.
func (o *IngestersVulnerability) SetCveLink(v string) {
	o.CveLink = &v
}

// GetCveOverallScore returns the CveOverallScore field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveOverallScore() float32 {
	if o == nil || IsNil(o.CveOverallScore) {
		var ret float32
		return ret
	}
	return *o.CveOverallScore
}

// GetCveOverallScoreOk returns a tuple with the CveOverallScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveOverallScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.CveOverallScore) {
		return nil, false
	}
	return o.CveOverallScore, true
}

// HasCveOverallScore returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveOverallScore() bool {
	if o != nil && !IsNil(o.CveOverallScore) {
		return true
	}

	return false
}

// SetCveOverallScore gets a reference to the given float32 and assigns it to the CveOverallScore field.
func (o *IngestersVulnerability) SetCveOverallScore(v float32) {
	o.CveOverallScore = &v
}

// GetCveSeverity returns the CveSeverity field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveSeverity() string {
	if o == nil || IsNil(o.CveSeverity) {
		var ret string
		return ret
	}
	return *o.CveSeverity
}

// GetCveSeverityOk returns a tuple with the CveSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.CveSeverity) {
		return nil, false
	}
	return o.CveSeverity, true
}

// HasCveSeverity returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveSeverity() bool {
	if o != nil && !IsNil(o.CveSeverity) {
		return true
	}

	return false
}

// SetCveSeverity gets a reference to the given string and assigns it to the CveSeverity field.
func (o *IngestersVulnerability) SetCveSeverity(v string) {
	o.CveSeverity = &v
}

// GetCveType returns the CveType field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetCveType() string {
	if o == nil || IsNil(o.CveType) {
		var ret string
		return ret
	}
	return *o.CveType
}

// GetCveTypeOk returns a tuple with the CveType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetCveTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CveType) {
		return nil, false
	}
	return o.CveType, true
}

// HasCveType returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasCveType() bool {
	if o != nil && !IsNil(o.CveType) {
		return true
	}

	return false
}

// SetCveType gets a reference to the given string and assigns it to the CveType field.
func (o *IngestersVulnerability) SetCveType(v string) {
	o.CveType = &v
}

// GetExploitPoc returns the ExploitPoc field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetExploitPoc() string {
	if o == nil || IsNil(o.ExploitPoc) {
		var ret string
		return ret
	}
	return *o.ExploitPoc
}

// GetExploitPocOk returns a tuple with the ExploitPoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetExploitPocOk() (*string, bool) {
	if o == nil || IsNil(o.ExploitPoc) {
		return nil, false
	}
	return o.ExploitPoc, true
}

// HasExploitPoc returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasExploitPoc() bool {
	if o != nil && !IsNil(o.ExploitPoc) {
		return true
	}

	return false
}

// SetExploitPoc gets a reference to the given string and assigns it to the ExploitPoc field.
func (o *IngestersVulnerability) SetExploitPoc(v string) {
	o.ExploitPoc = &v
}

// GetExploitabilityScore returns the ExploitabilityScore field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetExploitabilityScore() int32 {
	if o == nil || IsNil(o.ExploitabilityScore) {
		var ret int32
		return ret
	}
	return *o.ExploitabilityScore
}

// GetExploitabilityScoreOk returns a tuple with the ExploitabilityScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetExploitabilityScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.ExploitabilityScore) {
		return nil, false
	}
	return o.ExploitabilityScore, true
}

// HasExploitabilityScore returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasExploitabilityScore() bool {
	if o != nil && !IsNil(o.ExploitabilityScore) {
		return true
	}

	return false
}

// SetExploitabilityScore gets a reference to the given int32 and assigns it to the ExploitabilityScore field.
func (o *IngestersVulnerability) SetExploitabilityScore(v int32) {
	o.ExploitabilityScore = &v
}

// GetHasLiveConnection returns the HasLiveConnection field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetHasLiveConnection() bool {
	if o == nil || IsNil(o.HasLiveConnection) {
		var ret bool
		return ret
	}
	return *o.HasLiveConnection
}

// GetHasLiveConnectionOk returns a tuple with the HasLiveConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetHasLiveConnectionOk() (*bool, bool) {
	if o == nil || IsNil(o.HasLiveConnection) {
		return nil, false
	}
	return o.HasLiveConnection, true
}

// HasHasLiveConnection returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasHasLiveConnection() bool {
	if o != nil && !IsNil(o.HasLiveConnection) {
		return true
	}

	return false
}

// SetHasLiveConnection gets a reference to the given bool and assigns it to the HasLiveConnection field.
func (o *IngestersVulnerability) SetHasLiveConnection(v bool) {
	o.HasLiveConnection = &v
}

// GetInitExploitabilityScore returns the InitExploitabilityScore field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetInitExploitabilityScore() int32 {
	if o == nil || IsNil(o.InitExploitabilityScore) {
		var ret int32
		return ret
	}
	return *o.InitExploitabilityScore
}

// GetInitExploitabilityScoreOk returns a tuple with the InitExploitabilityScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetInitExploitabilityScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.InitExploitabilityScore) {
		return nil, false
	}
	return o.InitExploitabilityScore, true
}

// HasInitExploitabilityScore returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasInitExploitabilityScore() bool {
	if o != nil && !IsNil(o.InitExploitabilityScore) {
		return true
	}

	return false
}

// SetInitExploitabilityScore gets a reference to the given int32 and assigns it to the InitExploitabilityScore field.
func (o *IngestersVulnerability) SetInitExploitabilityScore(v int32) {
	o.InitExploitabilityScore = &v
}

// GetParsedAttackVector returns the ParsedAttackVector field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetParsedAttackVector() string {
	if o == nil || IsNil(o.ParsedAttackVector) {
		var ret string
		return ret
	}
	return *o.ParsedAttackVector
}

// GetParsedAttackVectorOk returns a tuple with the ParsedAttackVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetParsedAttackVectorOk() (*string, bool) {
	if o == nil || IsNil(o.ParsedAttackVector) {
		return nil, false
	}
	return o.ParsedAttackVector, true
}

// HasParsedAttackVector returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasParsedAttackVector() bool {
	if o != nil && !IsNil(o.ParsedAttackVector) {
		return true
	}

	return false
}

// SetParsedAttackVector gets a reference to the given string and assigns it to the ParsedAttackVector field.
func (o *IngestersVulnerability) SetParsedAttackVector(v string) {
	o.ParsedAttackVector = &v
}

// GetScanId returns the ScanId field value if set, zero value otherwise.
func (o *IngestersVulnerability) GetScanId() string {
	if o == nil || IsNil(o.ScanId) {
		var ret string
		return ret
	}
	return *o.ScanId
}

// GetScanIdOk returns a tuple with the ScanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestersVulnerability) GetScanIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScanId) {
		return nil, false
	}
	return o.ScanId, true
}

// HasScanId returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasScanId() bool {
	if o != nil && !IsNil(o.ScanId) {
		return true
	}

	return false
}

// SetScanId gets a reference to the given string and assigns it to the ScanId field.
func (o *IngestersVulnerability) SetScanId(v string) {
	o.ScanId = &v
}

// GetUrls returns the Urls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IngestersVulnerability) GetUrls() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngestersVulnerability) GetUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.Urls) {
		return nil, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *IngestersVulnerability) HasUrls() bool {
	if o != nil && !IsNil(o.Urls) {
		return true
	}

	return false
}

// SetUrls gets a reference to the given []string and assigns it to the Urls field.
func (o *IngestersVulnerability) SetUrls(v []string) {
	o.Urls = v
}

func (o IngestersVulnerability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestersVulnerability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CveAttackVector) {
		toSerialize["cve_attack_vector"] = o.CveAttackVector
	}
	if !IsNil(o.CveCausedByPackage) {
		toSerialize["cve_caused_by_package"] = o.CveCausedByPackage
	}
	if !IsNil(o.CveCausedByPackagePath) {
		toSerialize["cve_caused_by_package_path"] = o.CveCausedByPackagePath
	}
	if !IsNil(o.CveContainerLayer) {
		toSerialize["cve_container_layer"] = o.CveContainerLayer
	}
	if !IsNil(o.CveCvssScore) {
		toSerialize["cve_cvss_score"] = o.CveCvssScore
	}
	if !IsNil(o.CveDescription) {
		toSerialize["cve_description"] = o.CveDescription
	}
	if !IsNil(o.CveFixedIn) {
		toSerialize["cve_fixed_in"] = o.CveFixedIn
	}
	if !IsNil(o.CveId) {
		toSerialize["cve_id"] = o.CveId
	}
	if !IsNil(o.CveLink) {
		toSerialize["cve_link"] = o.CveLink
	}
	if !IsNil(o.CveOverallScore) {
		toSerialize["cve_overall_score"] = o.CveOverallScore
	}
	if !IsNil(o.CveSeverity) {
		toSerialize["cve_severity"] = o.CveSeverity
	}
	if !IsNil(o.CveType) {
		toSerialize["cve_type"] = o.CveType
	}
	if !IsNil(o.ExploitPoc) {
		toSerialize["exploit_poc"] = o.ExploitPoc
	}
	if !IsNil(o.ExploitabilityScore) {
		toSerialize["exploitability_score"] = o.ExploitabilityScore
	}
	if !IsNil(o.HasLiveConnection) {
		toSerialize["has_live_connection"] = o.HasLiveConnection
	}
	if !IsNil(o.InitExploitabilityScore) {
		toSerialize["init_exploitability_score"] = o.InitExploitabilityScore
	}
	if !IsNil(o.ParsedAttackVector) {
		toSerialize["parsed_attack_vector"] = o.ParsedAttackVector
	}
	if !IsNil(o.ScanId) {
		toSerialize["scan_id"] = o.ScanId
	}
	if o.Urls != nil {
		toSerialize["urls"] = o.Urls
	}
	return toSerialize, nil
}

type NullableIngestersVulnerability struct {
	value *IngestersVulnerability
	isSet bool
}

func (v NullableIngestersVulnerability) Get() *IngestersVulnerability {
	return v.value
}

func (v *NullableIngestersVulnerability) Set(val *IngestersVulnerability) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestersVulnerability) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestersVulnerability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestersVulnerability(val *IngestersVulnerability) *NullableIngestersVulnerability {
	return &NullableIngestersVulnerability{value: val, isSet: true}
}

func (v NullableIngestersVulnerability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestersVulnerability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


