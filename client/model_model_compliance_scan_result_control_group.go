/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v2.5.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ModelComplianceScanResultControlGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelComplianceScanResultControlGroup{}

// ModelComplianceScanResultControlGroup struct for ModelComplianceScanResultControlGroup
type ModelComplianceScanResultControlGroup struct {
	BenchmarkTypes []string `json:"benchmark_types,omitempty"`
	Counts *map[string]int32 `json:"counts,omitempty"`
	ProblemTitle *string `json:"problem_title,omitempty"`
}

// NewModelComplianceScanResultControlGroup instantiates a new ModelComplianceScanResultControlGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelComplianceScanResultControlGroup() *ModelComplianceScanResultControlGroup {
	this := ModelComplianceScanResultControlGroup{}
	return &this
}

// NewModelComplianceScanResultControlGroupWithDefaults instantiates a new ModelComplianceScanResultControlGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelComplianceScanResultControlGroupWithDefaults() *ModelComplianceScanResultControlGroup {
	this := ModelComplianceScanResultControlGroup{}
	return &this
}

// GetBenchmarkTypes returns the BenchmarkTypes field value if set, zero value otherwise.
func (o *ModelComplianceScanResultControlGroup) GetBenchmarkTypes() []string {
	if o == nil || IsNil(o.BenchmarkTypes) {
		var ret []string
		return ret
	}
	return o.BenchmarkTypes
}

// GetBenchmarkTypesOk returns a tuple with the BenchmarkTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelComplianceScanResultControlGroup) GetBenchmarkTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.BenchmarkTypes) {
		return nil, false
	}
	return o.BenchmarkTypes, true
}

// HasBenchmarkTypes returns a boolean if a field has been set.
func (o *ModelComplianceScanResultControlGroup) HasBenchmarkTypes() bool {
	if o != nil && !IsNil(o.BenchmarkTypes) {
		return true
	}

	return false
}

// SetBenchmarkTypes gets a reference to the given []string and assigns it to the BenchmarkTypes field.
func (o *ModelComplianceScanResultControlGroup) SetBenchmarkTypes(v []string) {
	o.BenchmarkTypes = v
}

// GetCounts returns the Counts field value if set, zero value otherwise.
func (o *ModelComplianceScanResultControlGroup) GetCounts() map[string]int32 {
	if o == nil || IsNil(o.Counts) {
		var ret map[string]int32
		return ret
	}
	return *o.Counts
}

// GetCountsOk returns a tuple with the Counts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelComplianceScanResultControlGroup) GetCountsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Counts) {
		return nil, false
	}
	return o.Counts, true
}

// HasCounts returns a boolean if a field has been set.
func (o *ModelComplianceScanResultControlGroup) HasCounts() bool {
	if o != nil && !IsNil(o.Counts) {
		return true
	}

	return false
}

// SetCounts gets a reference to the given map[string]int32 and assigns it to the Counts field.
func (o *ModelComplianceScanResultControlGroup) SetCounts(v map[string]int32) {
	o.Counts = &v
}

// GetProblemTitle returns the ProblemTitle field value if set, zero value otherwise.
func (o *ModelComplianceScanResultControlGroup) GetProblemTitle() string {
	if o == nil || IsNil(o.ProblemTitle) {
		var ret string
		return ret
	}
	return *o.ProblemTitle
}

// GetProblemTitleOk returns a tuple with the ProblemTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelComplianceScanResultControlGroup) GetProblemTitleOk() (*string, bool) {
	if o == nil || IsNil(o.ProblemTitle) {
		return nil, false
	}
	return o.ProblemTitle, true
}

// HasProblemTitle returns a boolean if a field has been set.
func (o *ModelComplianceScanResultControlGroup) HasProblemTitle() bool {
	if o != nil && !IsNil(o.ProblemTitle) {
		return true
	}

	return false
}

// SetProblemTitle gets a reference to the given string and assigns it to the ProblemTitle field.
func (o *ModelComplianceScanResultControlGroup) SetProblemTitle(v string) {
	o.ProblemTitle = &v
}

func (o ModelComplianceScanResultControlGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelComplianceScanResultControlGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BenchmarkTypes) {
		toSerialize["benchmark_types"] = o.BenchmarkTypes
	}
	if !IsNil(o.Counts) {
		toSerialize["counts"] = o.Counts
	}
	if !IsNil(o.ProblemTitle) {
		toSerialize["problem_title"] = o.ProblemTitle
	}
	return toSerialize, nil
}

type NullableModelComplianceScanResultControlGroup struct {
	value *ModelComplianceScanResultControlGroup
	isSet bool
}

func (v NullableModelComplianceScanResultControlGroup) Get() *ModelComplianceScanResultControlGroup {
	return v.value
}

func (v *NullableModelComplianceScanResultControlGroup) Set(val *ModelComplianceScanResultControlGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableModelComplianceScanResultControlGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableModelComplianceScanResultControlGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelComplianceScanResultControlGroup(val *ModelComplianceScanResultControlGroup) *NullableModelComplianceScanResultControlGroup {
	return &NullableModelComplianceScanResultControlGroup{value: val, isSet: true}
}

func (v NullableModelComplianceScanResultControlGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelComplianceScanResultControlGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


