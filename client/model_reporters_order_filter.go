/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ReportersOrderFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportersOrderFilter{}

// ReportersOrderFilter struct for ReportersOrderFilter
type ReportersOrderFilter struct {
	Limit int32 `json:"limit"`
	OrderField string `json:"order_field"`
}

// NewReportersOrderFilter instantiates a new ReportersOrderFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportersOrderFilter(limit int32, orderField string) *ReportersOrderFilter {
	this := ReportersOrderFilter{}
	this.Limit = limit
	this.OrderField = orderField
	return &this
}

// NewReportersOrderFilterWithDefaults instantiates a new ReportersOrderFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportersOrderFilterWithDefaults() *ReportersOrderFilter {
	this := ReportersOrderFilter{}
	return &this
}

// GetLimit returns the Limit field value
func (o *ReportersOrderFilter) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *ReportersOrderFilter) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *ReportersOrderFilter) SetLimit(v int32) {
	o.Limit = v
}

// GetOrderField returns the OrderField field value
func (o *ReportersOrderFilter) GetOrderField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderField
}

// GetOrderFieldOk returns a tuple with the OrderField field value
// and a boolean to check if the value has been set.
func (o *ReportersOrderFilter) GetOrderFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderField, true
}

// SetOrderField sets field value
func (o *ReportersOrderFilter) SetOrderField(v string) {
	o.OrderField = v
}

func (o ReportersOrderFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportersOrderFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limit"] = o.Limit
	toSerialize["order_field"] = o.OrderField
	return toSerialize, nil
}

type NullableReportersOrderFilter struct {
	value *ReportersOrderFilter
	isSet bool
}

func (v NullableReportersOrderFilter) Get() *ReportersOrderFilter {
	return v.value
}

func (v *NullableReportersOrderFilter) Set(val *ReportersOrderFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableReportersOrderFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableReportersOrderFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportersOrderFilter(val *ReportersOrderFilter) *NullableReportersOrderFilter {
	return &NullableReportersOrderFilter{value: val, isSet: true}
}

func (v NullableReportersOrderFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportersOrderFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


