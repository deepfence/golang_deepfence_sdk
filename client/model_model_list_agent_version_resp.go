/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.2.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelListAgentVersionResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelListAgentVersionResp{}

// ModelListAgentVersionResp struct for ModelListAgentVersionResp
type ModelListAgentVersionResp struct {
	Versions []string `json:"versions"`
}

type _ModelListAgentVersionResp ModelListAgentVersionResp

// NewModelListAgentVersionResp instantiates a new ModelListAgentVersionResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelListAgentVersionResp(versions []string) *ModelListAgentVersionResp {
	this := ModelListAgentVersionResp{}
	this.Versions = versions
	return &this
}

// NewModelListAgentVersionRespWithDefaults instantiates a new ModelListAgentVersionResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelListAgentVersionRespWithDefaults() *ModelListAgentVersionResp {
	this := ModelListAgentVersionResp{}
	return &this
}

// GetVersions returns the Versions field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelListAgentVersionResp) GetVersions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelListAgentVersionResp) GetVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// SetVersions sets field value
func (o *ModelListAgentVersionResp) SetVersions(v []string) {
	o.Versions = v
}

func (o ModelListAgentVersionResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelListAgentVersionResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

func (o *ModelListAgentVersionResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"versions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelListAgentVersionResp := _ModelListAgentVersionResp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelListAgentVersionResp)

	if err != nil {
		return err
	}

	*o = ModelListAgentVersionResp(varModelListAgentVersionResp)

	return err
}

type NullableModelListAgentVersionResp struct {
	value *ModelListAgentVersionResp
	isSet bool
}

func (v NullableModelListAgentVersionResp) Get() *ModelListAgentVersionResp {
	return v.value
}

func (v *NullableModelListAgentVersionResp) Set(val *ModelListAgentVersionResp) {
	v.value = val
	v.isSet = true
}

func (v NullableModelListAgentVersionResp) IsSet() bool {
	return v.isSet
}

func (v *NullableModelListAgentVersionResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelListAgentVersionResp(val *ModelListAgentVersionResp) *NullableModelListAgentVersionResp {
	return &NullableModelListAgentVersionResp{value: val, isSet: true}
}

func (v NullableModelListAgentVersionResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelListAgentVersionResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


