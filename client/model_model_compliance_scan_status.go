/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ModelComplianceScanStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelComplianceScanStatus{}

// ModelComplianceScanStatus struct for ModelComplianceScanStatus
type ModelComplianceScanStatus struct {
	BenchmarkType *string `json:"benchmark_type,omitempty"`
	ScanId *string `json:"scan_id,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewModelComplianceScanStatus instantiates a new ModelComplianceScanStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelComplianceScanStatus() *ModelComplianceScanStatus {
	this := ModelComplianceScanStatus{}
	return &this
}

// NewModelComplianceScanStatusWithDefaults instantiates a new ModelComplianceScanStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelComplianceScanStatusWithDefaults() *ModelComplianceScanStatus {
	this := ModelComplianceScanStatus{}
	return &this
}

// GetBenchmarkType returns the BenchmarkType field value if set, zero value otherwise.
func (o *ModelComplianceScanStatus) GetBenchmarkType() string {
	if o == nil || isNil(o.BenchmarkType) {
		var ret string
		return ret
	}
	return *o.BenchmarkType
}

// GetBenchmarkTypeOk returns a tuple with the BenchmarkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelComplianceScanStatus) GetBenchmarkTypeOk() (*string, bool) {
	if o == nil || isNil(o.BenchmarkType) {
		return nil, false
	}
	return o.BenchmarkType, true
}

// HasBenchmarkType returns a boolean if a field has been set.
func (o *ModelComplianceScanStatus) HasBenchmarkType() bool {
	if o != nil && !isNil(o.BenchmarkType) {
		return true
	}

	return false
}

// SetBenchmarkType gets a reference to the given string and assigns it to the BenchmarkType field.
func (o *ModelComplianceScanStatus) SetBenchmarkType(v string) {
	o.BenchmarkType = &v
}

// GetScanId returns the ScanId field value if set, zero value otherwise.
func (o *ModelComplianceScanStatus) GetScanId() string {
	if o == nil || isNil(o.ScanId) {
		var ret string
		return ret
	}
	return *o.ScanId
}

// GetScanIdOk returns a tuple with the ScanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelComplianceScanStatus) GetScanIdOk() (*string, bool) {
	if o == nil || isNil(o.ScanId) {
		return nil, false
	}
	return o.ScanId, true
}

// HasScanId returns a boolean if a field has been set.
func (o *ModelComplianceScanStatus) HasScanId() bool {
	if o != nil && !isNil(o.ScanId) {
		return true
	}

	return false
}

// SetScanId gets a reference to the given string and assigns it to the ScanId field.
func (o *ModelComplianceScanStatus) SetScanId(v string) {
	o.ScanId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ModelComplianceScanStatus) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelComplianceScanStatus) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ModelComplianceScanStatus) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ModelComplianceScanStatus) SetStatus(v string) {
	o.Status = &v
}

func (o ModelComplianceScanStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelComplianceScanStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BenchmarkType) {
		toSerialize["benchmark_type"] = o.BenchmarkType
	}
	if !isNil(o.ScanId) {
		toSerialize["scan_id"] = o.ScanId
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableModelComplianceScanStatus struct {
	value *ModelComplianceScanStatus
	isSet bool
}

func (v NullableModelComplianceScanStatus) Get() *ModelComplianceScanStatus {
	return v.value
}

func (v *NullableModelComplianceScanStatus) Set(val *ModelComplianceScanStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModelComplianceScanStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModelComplianceScanStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelComplianceScanStatus(val *ModelComplianceScanStatus) *NullableModelComplianceScanStatus {
	return &NullableModelComplianceScanStatus{value: val, isSet: true}
}

func (v NullableModelComplianceScanStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelComplianceScanStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


