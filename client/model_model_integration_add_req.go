/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ModelIntegrationAddReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelIntegrationAddReq{}

// ModelIntegrationAddReq struct for ModelIntegrationAddReq
type ModelIntegrationAddReq struct {
	Config map[string]interface{} `json:"config,omitempty"`
	Filters map[string][]string `json:"filters,omitempty"`
	IntegrationType *string `json:"integration_type,omitempty"`
	NotificationType *string `json:"notification_type,omitempty"`
}

// NewModelIntegrationAddReq instantiates a new ModelIntegrationAddReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelIntegrationAddReq() *ModelIntegrationAddReq {
	this := ModelIntegrationAddReq{}
	return &this
}

// NewModelIntegrationAddReqWithDefaults instantiates a new ModelIntegrationAddReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelIntegrationAddReqWithDefaults() *ModelIntegrationAddReq {
	this := ModelIntegrationAddReq{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelIntegrationAddReq) GetConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelIntegrationAddReq) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ModelIntegrationAddReq) HasConfig() bool {
	if o != nil && IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *ModelIntegrationAddReq) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetFilters returns the Filters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelIntegrationAddReq) GetFilters() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelIntegrationAddReq) GetFiltersOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return &o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ModelIntegrationAddReq) HasFilters() bool {
	if o != nil && IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given map[string][]string and assigns it to the Filters field.
func (o *ModelIntegrationAddReq) SetFilters(v map[string][]string) {
	o.Filters = v
}

// GetIntegrationType returns the IntegrationType field value if set, zero value otherwise.
func (o *ModelIntegrationAddReq) GetIntegrationType() string {
	if o == nil || IsNil(o.IntegrationType) {
		var ret string
		return ret
	}
	return *o.IntegrationType
}

// GetIntegrationTypeOk returns a tuple with the IntegrationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelIntegrationAddReq) GetIntegrationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationType) {
		return nil, false
	}
	return o.IntegrationType, true
}

// HasIntegrationType returns a boolean if a field has been set.
func (o *ModelIntegrationAddReq) HasIntegrationType() bool {
	if o != nil && !IsNil(o.IntegrationType) {
		return true
	}

	return false
}

// SetIntegrationType gets a reference to the given string and assigns it to the IntegrationType field.
func (o *ModelIntegrationAddReq) SetIntegrationType(v string) {
	o.IntegrationType = &v
}

// GetNotificationType returns the NotificationType field value if set, zero value otherwise.
func (o *ModelIntegrationAddReq) GetNotificationType() string {
	if o == nil || IsNil(o.NotificationType) {
		var ret string
		return ret
	}
	return *o.NotificationType
}

// GetNotificationTypeOk returns a tuple with the NotificationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelIntegrationAddReq) GetNotificationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationType) {
		return nil, false
	}
	return o.NotificationType, true
}

// HasNotificationType returns a boolean if a field has been set.
func (o *ModelIntegrationAddReq) HasNotificationType() bool {
	if o != nil && !IsNil(o.NotificationType) {
		return true
	}

	return false
}

// SetNotificationType gets a reference to the given string and assigns it to the NotificationType field.
func (o *ModelIntegrationAddReq) SetNotificationType(v string) {
	o.NotificationType = &v
}

func (o ModelIntegrationAddReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelIntegrationAddReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.IntegrationType) {
		toSerialize["integration_type"] = o.IntegrationType
	}
	if !IsNil(o.NotificationType) {
		toSerialize["notification_type"] = o.NotificationType
	}
	return toSerialize, nil
}

type NullableModelIntegrationAddReq struct {
	value *ModelIntegrationAddReq
	isSet bool
}

func (v NullableModelIntegrationAddReq) Get() *ModelIntegrationAddReq {
	return v.value
}

func (v *NullableModelIntegrationAddReq) Set(val *ModelIntegrationAddReq) {
	v.value = val
	v.isSet = true
}

func (v NullableModelIntegrationAddReq) IsSet() bool {
	return v.isSet
}

func (v *NullableModelIntegrationAddReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelIntegrationAddReq(val *ModelIntegrationAddReq) *NullableModelIntegrationAddReq {
	return &NullableModelIntegrationAddReq{value: val, isSet: true}
}

func (v NullableModelIntegrationAddReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelIntegrationAddReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


