/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deepfence_server_client

import (
	"encoding/json"
)

// checks if the ModelImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelImage{}

// ModelImage struct for ModelImage
type ModelImage struct {
	Id string `json:"id"`
	Metadata map[string]interface{} `json:"metadata"`
	Metrics ModelComputeMetrics `json:"metrics"`
	Name string `json:"name"`
	SizeMb string `json:"size_mb"`
	Tag string `json:"tag"`
	VirtualMb string `json:"virtual_mb"`
}

// NewModelImage instantiates a new ModelImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelImage(id string, metadata map[string]interface{}, metrics ModelComputeMetrics, name string, sizeMb string, tag string, virtualMb string) *ModelImage {
	this := ModelImage{}
	this.Id = id
	this.Metadata = metadata
	this.Metrics = metrics
	this.Name = name
	this.SizeMb = sizeMb
	this.Tag = tag
	this.VirtualMb = virtualMb
	return &this
}

// NewModelImageWithDefaults instantiates a new ModelImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelImageWithDefaults() *ModelImage {
	this := ModelImage{}
	return &this
}

// GetId returns the Id field value
func (o *ModelImage) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModelImage) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModelImage) SetId(v string) {
	o.Id = v
}

// GetMetadata returns the Metadata field value
func (o *ModelImage) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ModelImage) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *ModelImage) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetMetrics returns the Metrics field value
func (o *ModelImage) GetMetrics() ModelComputeMetrics {
	if o == nil {
		var ret ModelComputeMetrics
		return ret
	}

	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value
// and a boolean to check if the value has been set.
func (o *ModelImage) GetMetricsOk() (*ModelComputeMetrics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metrics, true
}

// SetMetrics sets field value
func (o *ModelImage) SetMetrics(v ModelComputeMetrics) {
	o.Metrics = v
}

// GetName returns the Name field value
func (o *ModelImage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModelImage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModelImage) SetName(v string) {
	o.Name = v
}

// GetSizeMb returns the SizeMb field value
func (o *ModelImage) GetSizeMb() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SizeMb
}

// GetSizeMbOk returns a tuple with the SizeMb field value
// and a boolean to check if the value has been set.
func (o *ModelImage) GetSizeMbOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeMb, true
}

// SetSizeMb sets field value
func (o *ModelImage) SetSizeMb(v string) {
	o.SizeMb = v
}

// GetTag returns the Tag field value
func (o *ModelImage) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *ModelImage) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *ModelImage) SetTag(v string) {
	o.Tag = v
}

// GetVirtualMb returns the VirtualMb field value
func (o *ModelImage) GetVirtualMb() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VirtualMb
}

// GetVirtualMbOk returns a tuple with the VirtualMb field value
// and a boolean to check if the value has been set.
func (o *ModelImage) GetVirtualMbOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualMb, true
}

// SetVirtualMb sets field value
func (o *ModelImage) SetVirtualMb(v string) {
	o.VirtualMb = v
}

func (o ModelImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["metadata"] = o.Metadata
	toSerialize["metrics"] = o.Metrics
	toSerialize["name"] = o.Name
	toSerialize["size_mb"] = o.SizeMb
	toSerialize["tag"] = o.Tag
	toSerialize["virtual_mb"] = o.VirtualMb
	return toSerialize, nil
}

type NullableModelImage struct {
	value *ModelImage
	isSet bool
}

func (v NullableModelImage) Get() *ModelImage {
	return v.value
}

func (v *NullableModelImage) Set(val *ModelImage) {
	v.value = val
	v.isSet = true
}

func (v NullableModelImage) IsSet() bool {
	return v.isSet
}

func (v *NullableModelImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelImage(val *ModelImage) *NullableModelImage {
	return &NullableModelImage{value: val, isSet: true}
}

func (v NullableModelImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


