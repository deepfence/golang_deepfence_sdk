/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ModelUpdateUserPasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUpdateUserPasswordRequest{}

// ModelUpdateUserPasswordRequest struct for ModelUpdateUserPasswordRequest
type ModelUpdateUserPasswordRequest struct {
	NewPassword *string `json:"new_password,omitempty"`
	OldPassword *string `json:"old_password,omitempty"`
}

// NewModelUpdateUserPasswordRequest instantiates a new ModelUpdateUserPasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUpdateUserPasswordRequest() *ModelUpdateUserPasswordRequest {
	this := ModelUpdateUserPasswordRequest{}
	return &this
}

// NewModelUpdateUserPasswordRequestWithDefaults instantiates a new ModelUpdateUserPasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUpdateUserPasswordRequestWithDefaults() *ModelUpdateUserPasswordRequest {
	this := ModelUpdateUserPasswordRequest{}
	return &this
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *ModelUpdateUserPasswordRequest) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword) {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUpdateUserPasswordRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.NewPassword) {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *ModelUpdateUserPasswordRequest) HasNewPassword() bool {
	if o != nil && !IsNil(o.NewPassword) {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *ModelUpdateUserPasswordRequest) SetNewPassword(v string) {
	o.NewPassword = &v
}

// GetOldPassword returns the OldPassword field value if set, zero value otherwise.
func (o *ModelUpdateUserPasswordRequest) GetOldPassword() string {
	if o == nil || IsNil(o.OldPassword) {
		var ret string
		return ret
	}
	return *o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUpdateUserPasswordRequest) GetOldPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.OldPassword) {
		return nil, false
	}
	return o.OldPassword, true
}

// HasOldPassword returns a boolean if a field has been set.
func (o *ModelUpdateUserPasswordRequest) HasOldPassword() bool {
	if o != nil && !IsNil(o.OldPassword) {
		return true
	}

	return false
}

// SetOldPassword gets a reference to the given string and assigns it to the OldPassword field.
func (o *ModelUpdateUserPasswordRequest) SetOldPassword(v string) {
	o.OldPassword = &v
}

func (o ModelUpdateUserPasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUpdateUserPasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewPassword) {
		toSerialize["new_password"] = o.NewPassword
	}
	if !IsNil(o.OldPassword) {
		toSerialize["old_password"] = o.OldPassword
	}
	return toSerialize, nil
}

type NullableModelUpdateUserPasswordRequest struct {
	value *ModelUpdateUserPasswordRequest
	isSet bool
}

func (v NullableModelUpdateUserPasswordRequest) Get() *ModelUpdateUserPasswordRequest {
	return v.value
}

func (v *NullableModelUpdateUserPasswordRequest) Set(val *ModelUpdateUserPasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUpdateUserPasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUpdateUserPasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUpdateUserPasswordRequest(val *ModelUpdateUserPasswordRequest) *NullableModelUpdateUserPasswordRequest {
	return &NullableModelUpdateUserPasswordRequest{value: val, isSet: true}
}

func (v NullableModelUpdateUserPasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUpdateUserPasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


