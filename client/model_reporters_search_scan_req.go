/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ReportersSearchScanReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportersSearchScanReq{}

// ReportersSearchScanReq struct for ReportersSearchScanReq
type ReportersSearchScanReq struct {
	NodeFilters ReportersSearchFilter `json:"node_filters"`
	ScanFilters ReportersSearchFilter `json:"scan_filters"`
	Window ModelFetchWindow `json:"window"`
}

// NewReportersSearchScanReq instantiates a new ReportersSearchScanReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportersSearchScanReq(nodeFilters ReportersSearchFilter, scanFilters ReportersSearchFilter, window ModelFetchWindow) *ReportersSearchScanReq {
	this := ReportersSearchScanReq{}
	this.NodeFilters = nodeFilters
	this.ScanFilters = scanFilters
	this.Window = window
	return &this
}

// NewReportersSearchScanReqWithDefaults instantiates a new ReportersSearchScanReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportersSearchScanReqWithDefaults() *ReportersSearchScanReq {
	this := ReportersSearchScanReq{}
	return &this
}

// GetNodeFilters returns the NodeFilters field value
func (o *ReportersSearchScanReq) GetNodeFilters() ReportersSearchFilter {
	if o == nil {
		var ret ReportersSearchFilter
		return ret
	}

	return o.NodeFilters
}

// GetNodeFiltersOk returns a tuple with the NodeFilters field value
// and a boolean to check if the value has been set.
func (o *ReportersSearchScanReq) GetNodeFiltersOk() (*ReportersSearchFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeFilters, true
}

// SetNodeFilters sets field value
func (o *ReportersSearchScanReq) SetNodeFilters(v ReportersSearchFilter) {
	o.NodeFilters = v
}

// GetScanFilters returns the ScanFilters field value
func (o *ReportersSearchScanReq) GetScanFilters() ReportersSearchFilter {
	if o == nil {
		var ret ReportersSearchFilter
		return ret
	}

	return o.ScanFilters
}

// GetScanFiltersOk returns a tuple with the ScanFilters field value
// and a boolean to check if the value has been set.
func (o *ReportersSearchScanReq) GetScanFiltersOk() (*ReportersSearchFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScanFilters, true
}

// SetScanFilters sets field value
func (o *ReportersSearchScanReq) SetScanFilters(v ReportersSearchFilter) {
	o.ScanFilters = v
}

// GetWindow returns the Window field value
func (o *ReportersSearchScanReq) GetWindow() ModelFetchWindow {
	if o == nil {
		var ret ModelFetchWindow
		return ret
	}

	return o.Window
}

// GetWindowOk returns a tuple with the Window field value
// and a boolean to check if the value has been set.
func (o *ReportersSearchScanReq) GetWindowOk() (*ModelFetchWindow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Window, true
}

// SetWindow sets field value
func (o *ReportersSearchScanReq) SetWindow(v ModelFetchWindow) {
	o.Window = v
}

func (o ReportersSearchScanReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportersSearchScanReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["node_filters"] = o.NodeFilters
	toSerialize["scan_filters"] = o.ScanFilters
	toSerialize["window"] = o.Window
	return toSerialize, nil
}

type NullableReportersSearchScanReq struct {
	value *ReportersSearchScanReq
	isSet bool
}

func (v NullableReportersSearchScanReq) Get() *ReportersSearchScanReq {
	return v.value
}

func (v *NullableReportersSearchScanReq) Set(val *ReportersSearchScanReq) {
	v.value = val
	v.isSet = true
}

func (v NullableReportersSearchScanReq) IsSet() bool {
	return v.isSet
}

func (v *NullableReportersSearchScanReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportersSearchScanReq(val *ReportersSearchScanReq) *NullableReportersSearchScanReq {
	return &NullableReportersSearchScanReq{value: val, isSet: true}
}

func (v NullableReportersSearchScanReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportersSearchScanReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


