/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.0.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the GraphVulnerabilityThreatGraphRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphVulnerabilityThreatGraphRequest{}

// GraphVulnerabilityThreatGraphRequest struct for GraphVulnerabilityThreatGraphRequest
type GraphVulnerabilityThreatGraphRequest struct {
	GraphType string `json:"graph_type"`
}

// NewGraphVulnerabilityThreatGraphRequest instantiates a new GraphVulnerabilityThreatGraphRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphVulnerabilityThreatGraphRequest(graphType string) *GraphVulnerabilityThreatGraphRequest {
	this := GraphVulnerabilityThreatGraphRequest{}
	this.GraphType = graphType
	return &this
}

// NewGraphVulnerabilityThreatGraphRequestWithDefaults instantiates a new GraphVulnerabilityThreatGraphRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphVulnerabilityThreatGraphRequestWithDefaults() *GraphVulnerabilityThreatGraphRequest {
	this := GraphVulnerabilityThreatGraphRequest{}
	return &this
}

// GetGraphType returns the GraphType field value
func (o *GraphVulnerabilityThreatGraphRequest) GetGraphType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GraphType
}

// GetGraphTypeOk returns a tuple with the GraphType field value
// and a boolean to check if the value has been set.
func (o *GraphVulnerabilityThreatGraphRequest) GetGraphTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GraphType, true
}

// SetGraphType sets field value
func (o *GraphVulnerabilityThreatGraphRequest) SetGraphType(v string) {
	o.GraphType = v
}

func (o GraphVulnerabilityThreatGraphRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphVulnerabilityThreatGraphRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["graph_type"] = o.GraphType
	return toSerialize, nil
}

type NullableGraphVulnerabilityThreatGraphRequest struct {
	value *GraphVulnerabilityThreatGraphRequest
	isSet bool
}

func (v NullableGraphVulnerabilityThreatGraphRequest) Get() *GraphVulnerabilityThreatGraphRequest {
	return v.value
}

func (v *NullableGraphVulnerabilityThreatGraphRequest) Set(val *GraphVulnerabilityThreatGraphRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphVulnerabilityThreatGraphRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphVulnerabilityThreatGraphRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphVulnerabilityThreatGraphRequest(val *GraphVulnerabilityThreatGraphRequest) *NullableGraphVulnerabilityThreatGraphRequest {
	return &NullableGraphVulnerabilityThreatGraphRequest{value: val, isSet: true}
}

func (v NullableGraphVulnerabilityThreatGraphRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphVulnerabilityThreatGraphRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


