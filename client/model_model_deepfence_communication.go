/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v2.5.5
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the ModelDeepfenceCommunication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelDeepfenceCommunication{}

// ModelDeepfenceCommunication struct for ModelDeepfenceCommunication
type ModelDeepfenceCommunication struct {
	ButtonContent *string `json:"button_content,omitempty"`
	Content *string `json:"content,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Link *string `json:"link,omitempty"`
	LinkTitle *string `json:"link_title,omitempty"`
	Read *bool `json:"read,omitempty"`
	Title *string `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewModelDeepfenceCommunication instantiates a new ModelDeepfenceCommunication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelDeepfenceCommunication() *ModelDeepfenceCommunication {
	this := ModelDeepfenceCommunication{}
	return &this
}

// NewModelDeepfenceCommunicationWithDefaults instantiates a new ModelDeepfenceCommunication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelDeepfenceCommunicationWithDefaults() *ModelDeepfenceCommunication {
	this := ModelDeepfenceCommunication{}
	return &this
}

// GetButtonContent returns the ButtonContent field value if set, zero value otherwise.
func (o *ModelDeepfenceCommunication) GetButtonContent() string {
	if o == nil || IsNil(o.ButtonContent) {
		var ret string
		return ret
	}
	return *o.ButtonContent
}

// GetButtonContentOk returns a tuple with the ButtonContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDeepfenceCommunication) GetButtonContentOk() (*string, bool) {
	if o == nil || IsNil(o.ButtonContent) {
		return nil, false
	}
	return o.ButtonContent, true
}

// HasButtonContent returns a boolean if a field has been set.
func (o *ModelDeepfenceCommunication) HasButtonContent() bool {
	if o != nil && !IsNil(o.ButtonContent) {
		return true
	}

	return false
}

// SetButtonContent gets a reference to the given string and assigns it to the ButtonContent field.
func (o *ModelDeepfenceCommunication) SetButtonContent(v string) {
	o.ButtonContent = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ModelDeepfenceCommunication) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDeepfenceCommunication) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ModelDeepfenceCommunication) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ModelDeepfenceCommunication) SetContent(v string) {
	o.Content = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ModelDeepfenceCommunication) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDeepfenceCommunication) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ModelDeepfenceCommunication) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ModelDeepfenceCommunication) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelDeepfenceCommunication) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDeepfenceCommunication) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelDeepfenceCommunication) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelDeepfenceCommunication) SetId(v int32) {
	o.Id = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *ModelDeepfenceCommunication) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDeepfenceCommunication) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *ModelDeepfenceCommunication) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *ModelDeepfenceCommunication) SetLink(v string) {
	o.Link = &v
}

// GetLinkTitle returns the LinkTitle field value if set, zero value otherwise.
func (o *ModelDeepfenceCommunication) GetLinkTitle() string {
	if o == nil || IsNil(o.LinkTitle) {
		var ret string
		return ret
	}
	return *o.LinkTitle
}

// GetLinkTitleOk returns a tuple with the LinkTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDeepfenceCommunication) GetLinkTitleOk() (*string, bool) {
	if o == nil || IsNil(o.LinkTitle) {
		return nil, false
	}
	return o.LinkTitle, true
}

// HasLinkTitle returns a boolean if a field has been set.
func (o *ModelDeepfenceCommunication) HasLinkTitle() bool {
	if o != nil && !IsNil(o.LinkTitle) {
		return true
	}

	return false
}

// SetLinkTitle gets a reference to the given string and assigns it to the LinkTitle field.
func (o *ModelDeepfenceCommunication) SetLinkTitle(v string) {
	o.LinkTitle = &v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *ModelDeepfenceCommunication) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDeepfenceCommunication) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *ModelDeepfenceCommunication) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *ModelDeepfenceCommunication) SetRead(v bool) {
	o.Read = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ModelDeepfenceCommunication) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDeepfenceCommunication) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ModelDeepfenceCommunication) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ModelDeepfenceCommunication) SetTitle(v string) {
	o.Title = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ModelDeepfenceCommunication) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelDeepfenceCommunication) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ModelDeepfenceCommunication) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ModelDeepfenceCommunication) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ModelDeepfenceCommunication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelDeepfenceCommunication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ButtonContent) {
		toSerialize["button_content"] = o.ButtonContent
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.LinkTitle) {
		toSerialize["link_title"] = o.LinkTitle
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableModelDeepfenceCommunication struct {
	value *ModelDeepfenceCommunication
	isSet bool
}

func (v NullableModelDeepfenceCommunication) Get() *ModelDeepfenceCommunication {
	return v.value
}

func (v *NullableModelDeepfenceCommunication) Set(val *ModelDeepfenceCommunication) {
	v.value = val
	v.isSet = true
}

func (v NullableModelDeepfenceCommunication) IsSet() bool {
	return v.isSet
}

func (v *NullableModelDeepfenceCommunication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelDeepfenceCommunication(val *ModelDeepfenceCommunication) *NullableModelDeepfenceCommunication {
	return &NullableModelDeepfenceCommunication{value: val, isSet: true}
}

func (v NullableModelDeepfenceCommunication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelDeepfenceCommunication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


