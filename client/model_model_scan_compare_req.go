/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: 2.2.0
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelScanCompareReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelScanCompareReq{}

// ModelScanCompareReq struct for ModelScanCompareReq
type ModelScanCompareReq struct {
	BaseScanId string `json:"base_scan_id"`
	FieldsFilter ReportersFieldsFilters `json:"fields_filter"`
	ToScanId string `json:"to_scan_id"`
	Window ModelFetchWindow `json:"window"`
}

type _ModelScanCompareReq ModelScanCompareReq

// NewModelScanCompareReq instantiates a new ModelScanCompareReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelScanCompareReq(baseScanId string, fieldsFilter ReportersFieldsFilters, toScanId string, window ModelFetchWindow) *ModelScanCompareReq {
	this := ModelScanCompareReq{}
	this.BaseScanId = baseScanId
	this.FieldsFilter = fieldsFilter
	this.ToScanId = toScanId
	this.Window = window
	return &this
}

// NewModelScanCompareReqWithDefaults instantiates a new ModelScanCompareReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelScanCompareReqWithDefaults() *ModelScanCompareReq {
	this := ModelScanCompareReq{}
	return &this
}

// GetBaseScanId returns the BaseScanId field value
func (o *ModelScanCompareReq) GetBaseScanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseScanId
}

// GetBaseScanIdOk returns a tuple with the BaseScanId field value
// and a boolean to check if the value has been set.
func (o *ModelScanCompareReq) GetBaseScanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseScanId, true
}

// SetBaseScanId sets field value
func (o *ModelScanCompareReq) SetBaseScanId(v string) {
	o.BaseScanId = v
}

// GetFieldsFilter returns the FieldsFilter field value
func (o *ModelScanCompareReq) GetFieldsFilter() ReportersFieldsFilters {
	if o == nil {
		var ret ReportersFieldsFilters
		return ret
	}

	return o.FieldsFilter
}

// GetFieldsFilterOk returns a tuple with the FieldsFilter field value
// and a boolean to check if the value has been set.
func (o *ModelScanCompareReq) GetFieldsFilterOk() (*ReportersFieldsFilters, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldsFilter, true
}

// SetFieldsFilter sets field value
func (o *ModelScanCompareReq) SetFieldsFilter(v ReportersFieldsFilters) {
	o.FieldsFilter = v
}

// GetToScanId returns the ToScanId field value
func (o *ModelScanCompareReq) GetToScanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToScanId
}

// GetToScanIdOk returns a tuple with the ToScanId field value
// and a boolean to check if the value has been set.
func (o *ModelScanCompareReq) GetToScanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToScanId, true
}

// SetToScanId sets field value
func (o *ModelScanCompareReq) SetToScanId(v string) {
	o.ToScanId = v
}

// GetWindow returns the Window field value
func (o *ModelScanCompareReq) GetWindow() ModelFetchWindow {
	if o == nil {
		var ret ModelFetchWindow
		return ret
	}

	return o.Window
}

// GetWindowOk returns a tuple with the Window field value
// and a boolean to check if the value has been set.
func (o *ModelScanCompareReq) GetWindowOk() (*ModelFetchWindow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Window, true
}

// SetWindow sets field value
func (o *ModelScanCompareReq) SetWindow(v ModelFetchWindow) {
	o.Window = v
}

func (o ModelScanCompareReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelScanCompareReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["base_scan_id"] = o.BaseScanId
	toSerialize["fields_filter"] = o.FieldsFilter
	toSerialize["to_scan_id"] = o.ToScanId
	toSerialize["window"] = o.Window
	return toSerialize, nil
}

func (o *ModelScanCompareReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"base_scan_id",
		"fields_filter",
		"to_scan_id",
		"window",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelScanCompareReq := _ModelScanCompareReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelScanCompareReq)

	if err != nil {
		return err
	}

	*o = ModelScanCompareReq(varModelScanCompareReq)

	return err
}

type NullableModelScanCompareReq struct {
	value *ModelScanCompareReq
	isSet bool
}

func (v NullableModelScanCompareReq) Get() *ModelScanCompareReq {
	return v.value
}

func (v *NullableModelScanCompareReq) Set(val *ModelScanCompareReq) {
	v.value = val
	v.isSet = true
}

func (v NullableModelScanCompareReq) IsSet() bool {
	return v.isSet
}

func (v *NullableModelScanCompareReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelScanCompareReq(val *ModelScanCompareReq) *NullableModelScanCompareReq {
	return &NullableModelScanCompareReq{value: val, isSet: true}
}

func (v NullableModelScanCompareReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelScanCompareReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


