/*
Deepfence ThreatMapper

Deepfence Runtime API provides programmatic control over Deepfence microservice securing your container, kubernetes and cloud deployments. The API abstracts away underlying infrastructure details like cloud provider,  container distros, container orchestrator and type of deployment. This is one uniform API to manage and control security alerts, policies and response to alerts for microservices running anywhere i.e. managed pure greenfield container deployments or a mix of containers, VMs and serverless paradigms like AWS Fargate.

API version: v2.5.2
Contact: community@deepfence.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelVulnerabilityRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelVulnerabilityRule{}

// ModelVulnerabilityRule struct for ModelVulnerabilityRule
type ModelVulnerabilityRule struct {
	CisaKev bool `json:"cisa_kev"`
	CveAttackVectors []string `json:"cve_attack_vectors"`
	CveCvssScores []interface{} `json:"cve_cvss_scores"`
	CveDescriptions []string `json:"cve_descriptions"`
	CveFixedIns []string `json:"cve_fixed_ins"`
	CveId string `json:"cve_id"`
	CveLinks []string `json:"cve_links"`
	CveOverallScores []interface{} `json:"cve_overall_scores"`
	CveSeverities []string `json:"cve_severities"`
	CveTypes []string `json:"cve_types"`
	EpssScore float32 `json:"epss_score"`
	ExploitPocs []string `json:"exploit_pocs"`
	Masked bool `json:"masked"`
	Namespaces []string `json:"namespaces"`
	NodeId string `json:"node_id"`
	PackageNames []string `json:"package_names"`
	ParsedAttackVectors []string `json:"parsed_attack_vectors"`
	Resources []ModelBasicNode `json:"resources,omitempty"`
	UpdatedAt int32 `json:"updated_at"`
	Urls []string `json:"urls"`
}

type _ModelVulnerabilityRule ModelVulnerabilityRule

// NewModelVulnerabilityRule instantiates a new ModelVulnerabilityRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelVulnerabilityRule(cisaKev bool, cveAttackVectors []string, cveCvssScores []interface{}, cveDescriptions []string, cveFixedIns []string, cveId string, cveLinks []string, cveOverallScores []interface{}, cveSeverities []string, cveTypes []string, epssScore float32, exploitPocs []string, masked bool, namespaces []string, nodeId string, packageNames []string, parsedAttackVectors []string, updatedAt int32, urls []string) *ModelVulnerabilityRule {
	this := ModelVulnerabilityRule{}
	this.CisaKev = cisaKev
	this.CveAttackVectors = cveAttackVectors
	this.CveCvssScores = cveCvssScores
	this.CveDescriptions = cveDescriptions
	this.CveFixedIns = cveFixedIns
	this.CveId = cveId
	this.CveLinks = cveLinks
	this.CveOverallScores = cveOverallScores
	this.CveSeverities = cveSeverities
	this.CveTypes = cveTypes
	this.EpssScore = epssScore
	this.ExploitPocs = exploitPocs
	this.Masked = masked
	this.Namespaces = namespaces
	this.NodeId = nodeId
	this.PackageNames = packageNames
	this.ParsedAttackVectors = parsedAttackVectors
	this.UpdatedAt = updatedAt
	this.Urls = urls
	return &this
}

// NewModelVulnerabilityRuleWithDefaults instantiates a new ModelVulnerabilityRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelVulnerabilityRuleWithDefaults() *ModelVulnerabilityRule {
	this := ModelVulnerabilityRule{}
	return &this
}

// GetCisaKev returns the CisaKev field value
func (o *ModelVulnerabilityRule) GetCisaKev() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CisaKev
}

// GetCisaKevOk returns a tuple with the CisaKev field value
// and a boolean to check if the value has been set.
func (o *ModelVulnerabilityRule) GetCisaKevOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CisaKev, true
}

// SetCisaKev sets field value
func (o *ModelVulnerabilityRule) SetCisaKev(v bool) {
	o.CisaKev = v
}

// GetCveAttackVectors returns the CveAttackVectors field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelVulnerabilityRule) GetCveAttackVectors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CveAttackVectors
}

// GetCveAttackVectorsOk returns a tuple with the CveAttackVectors field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetCveAttackVectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.CveAttackVectors) {
		return nil, false
	}
	return o.CveAttackVectors, true
}

// SetCveAttackVectors sets field value
func (o *ModelVulnerabilityRule) SetCveAttackVectors(v []string) {
	o.CveAttackVectors = v
}

// GetCveCvssScores returns the CveCvssScores field value
// If the value is explicit nil, the zero value for []interface{} will be returned
func (o *ModelVulnerabilityRule) GetCveCvssScores() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.CveCvssScores
}

// GetCveCvssScoresOk returns a tuple with the CveCvssScores field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetCveCvssScoresOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.CveCvssScores) {
		return nil, false
	}
	return o.CveCvssScores, true
}

// SetCveCvssScores sets field value
func (o *ModelVulnerabilityRule) SetCveCvssScores(v []interface{}) {
	o.CveCvssScores = v
}

// GetCveDescriptions returns the CveDescriptions field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelVulnerabilityRule) GetCveDescriptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CveDescriptions
}

// GetCveDescriptionsOk returns a tuple with the CveDescriptions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetCveDescriptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.CveDescriptions) {
		return nil, false
	}
	return o.CveDescriptions, true
}

// SetCveDescriptions sets field value
func (o *ModelVulnerabilityRule) SetCveDescriptions(v []string) {
	o.CveDescriptions = v
}

// GetCveFixedIns returns the CveFixedIns field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelVulnerabilityRule) GetCveFixedIns() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CveFixedIns
}

// GetCveFixedInsOk returns a tuple with the CveFixedIns field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetCveFixedInsOk() ([]string, bool) {
	if o == nil || IsNil(o.CveFixedIns) {
		return nil, false
	}
	return o.CveFixedIns, true
}

// SetCveFixedIns sets field value
func (o *ModelVulnerabilityRule) SetCveFixedIns(v []string) {
	o.CveFixedIns = v
}

// GetCveId returns the CveId field value
func (o *ModelVulnerabilityRule) GetCveId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CveId
}

// GetCveIdOk returns a tuple with the CveId field value
// and a boolean to check if the value has been set.
func (o *ModelVulnerabilityRule) GetCveIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CveId, true
}

// SetCveId sets field value
func (o *ModelVulnerabilityRule) SetCveId(v string) {
	o.CveId = v
}

// GetCveLinks returns the CveLinks field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelVulnerabilityRule) GetCveLinks() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CveLinks
}

// GetCveLinksOk returns a tuple with the CveLinks field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetCveLinksOk() ([]string, bool) {
	if o == nil || IsNil(o.CveLinks) {
		return nil, false
	}
	return o.CveLinks, true
}

// SetCveLinks sets field value
func (o *ModelVulnerabilityRule) SetCveLinks(v []string) {
	o.CveLinks = v
}

// GetCveOverallScores returns the CveOverallScores field value
// If the value is explicit nil, the zero value for []interface{} will be returned
func (o *ModelVulnerabilityRule) GetCveOverallScores() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.CveOverallScores
}

// GetCveOverallScoresOk returns a tuple with the CveOverallScores field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetCveOverallScoresOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.CveOverallScores) {
		return nil, false
	}
	return o.CveOverallScores, true
}

// SetCveOverallScores sets field value
func (o *ModelVulnerabilityRule) SetCveOverallScores(v []interface{}) {
	o.CveOverallScores = v
}

// GetCveSeverities returns the CveSeverities field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelVulnerabilityRule) GetCveSeverities() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CveSeverities
}

// GetCveSeveritiesOk returns a tuple with the CveSeverities field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetCveSeveritiesOk() ([]string, bool) {
	if o == nil || IsNil(o.CveSeverities) {
		return nil, false
	}
	return o.CveSeverities, true
}

// SetCveSeverities sets field value
func (o *ModelVulnerabilityRule) SetCveSeverities(v []string) {
	o.CveSeverities = v
}

// GetCveTypes returns the CveTypes field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelVulnerabilityRule) GetCveTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CveTypes
}

// GetCveTypesOk returns a tuple with the CveTypes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetCveTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.CveTypes) {
		return nil, false
	}
	return o.CveTypes, true
}

// SetCveTypes sets field value
func (o *ModelVulnerabilityRule) SetCveTypes(v []string) {
	o.CveTypes = v
}

// GetEpssScore returns the EpssScore field value
func (o *ModelVulnerabilityRule) GetEpssScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.EpssScore
}

// GetEpssScoreOk returns a tuple with the EpssScore field value
// and a boolean to check if the value has been set.
func (o *ModelVulnerabilityRule) GetEpssScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EpssScore, true
}

// SetEpssScore sets field value
func (o *ModelVulnerabilityRule) SetEpssScore(v float32) {
	o.EpssScore = v
}

// GetExploitPocs returns the ExploitPocs field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelVulnerabilityRule) GetExploitPocs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExploitPocs
}

// GetExploitPocsOk returns a tuple with the ExploitPocs field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetExploitPocsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExploitPocs) {
		return nil, false
	}
	return o.ExploitPocs, true
}

// SetExploitPocs sets field value
func (o *ModelVulnerabilityRule) SetExploitPocs(v []string) {
	o.ExploitPocs = v
}

// GetMasked returns the Masked field value
func (o *ModelVulnerabilityRule) GetMasked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Masked
}

// GetMaskedOk returns a tuple with the Masked field value
// and a boolean to check if the value has been set.
func (o *ModelVulnerabilityRule) GetMaskedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Masked, true
}

// SetMasked sets field value
func (o *ModelVulnerabilityRule) SetMasked(v bool) {
	o.Masked = v
}

// GetNamespaces returns the Namespaces field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelVulnerabilityRule) GetNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetNamespacesOk() ([]string, bool) {
	if o == nil || IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// SetNamespaces sets field value
func (o *ModelVulnerabilityRule) SetNamespaces(v []string) {
	o.Namespaces = v
}

// GetNodeId returns the NodeId field value
func (o *ModelVulnerabilityRule) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *ModelVulnerabilityRule) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *ModelVulnerabilityRule) SetNodeId(v string) {
	o.NodeId = v
}

// GetPackageNames returns the PackageNames field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelVulnerabilityRule) GetPackageNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PackageNames
}

// GetPackageNamesOk returns a tuple with the PackageNames field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetPackageNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.PackageNames) {
		return nil, false
	}
	return o.PackageNames, true
}

// SetPackageNames sets field value
func (o *ModelVulnerabilityRule) SetPackageNames(v []string) {
	o.PackageNames = v
}

// GetParsedAttackVectors returns the ParsedAttackVectors field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelVulnerabilityRule) GetParsedAttackVectors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ParsedAttackVectors
}

// GetParsedAttackVectorsOk returns a tuple with the ParsedAttackVectors field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetParsedAttackVectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.ParsedAttackVectors) {
		return nil, false
	}
	return o.ParsedAttackVectors, true
}

// SetParsedAttackVectors sets field value
func (o *ModelVulnerabilityRule) SetParsedAttackVectors(v []string) {
	o.ParsedAttackVectors = v
}

// GetResources returns the Resources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelVulnerabilityRule) GetResources() []ModelBasicNode {
	if o == nil {
		var ret []ModelBasicNode
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetResourcesOk() ([]ModelBasicNode, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ModelVulnerabilityRule) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []ModelBasicNode and assigns it to the Resources field.
func (o *ModelVulnerabilityRule) SetResources(v []ModelBasicNode) {
	o.Resources = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ModelVulnerabilityRule) GetUpdatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ModelVulnerabilityRule) GetUpdatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ModelVulnerabilityRule) SetUpdatedAt(v int32) {
	o.UpdatedAt = v
}

// GetUrls returns the Urls field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModelVulnerabilityRule) GetUrls() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelVulnerabilityRule) GetUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.Urls) {
		return nil, false
	}
	return o.Urls, true
}

// SetUrls sets field value
func (o *ModelVulnerabilityRule) SetUrls(v []string) {
	o.Urls = v
}

func (o ModelVulnerabilityRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelVulnerabilityRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cisa_kev"] = o.CisaKev
	if o.CveAttackVectors != nil {
		toSerialize["cve_attack_vectors"] = o.CveAttackVectors
	}
	if o.CveCvssScores != nil {
		toSerialize["cve_cvss_scores"] = o.CveCvssScores
	}
	if o.CveDescriptions != nil {
		toSerialize["cve_descriptions"] = o.CveDescriptions
	}
	if o.CveFixedIns != nil {
		toSerialize["cve_fixed_ins"] = o.CveFixedIns
	}
	toSerialize["cve_id"] = o.CveId
	if o.CveLinks != nil {
		toSerialize["cve_links"] = o.CveLinks
	}
	if o.CveOverallScores != nil {
		toSerialize["cve_overall_scores"] = o.CveOverallScores
	}
	if o.CveSeverities != nil {
		toSerialize["cve_severities"] = o.CveSeverities
	}
	if o.CveTypes != nil {
		toSerialize["cve_types"] = o.CveTypes
	}
	toSerialize["epss_score"] = o.EpssScore
	if o.ExploitPocs != nil {
		toSerialize["exploit_pocs"] = o.ExploitPocs
	}
	toSerialize["masked"] = o.Masked
	if o.Namespaces != nil {
		toSerialize["namespaces"] = o.Namespaces
	}
	toSerialize["node_id"] = o.NodeId
	if o.PackageNames != nil {
		toSerialize["package_names"] = o.PackageNames
	}
	if o.ParsedAttackVectors != nil {
		toSerialize["parsed_attack_vectors"] = o.ParsedAttackVectors
	}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	toSerialize["updated_at"] = o.UpdatedAt
	if o.Urls != nil {
		toSerialize["urls"] = o.Urls
	}
	return toSerialize, nil
}

func (o *ModelVulnerabilityRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cisa_kev",
		"cve_attack_vectors",
		"cve_cvss_scores",
		"cve_descriptions",
		"cve_fixed_ins",
		"cve_id",
		"cve_links",
		"cve_overall_scores",
		"cve_severities",
		"cve_types",
		"epss_score",
		"exploit_pocs",
		"masked",
		"namespaces",
		"node_id",
		"package_names",
		"parsed_attack_vectors",
		"updated_at",
		"urls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelVulnerabilityRule := _ModelVulnerabilityRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelVulnerabilityRule)

	if err != nil {
		return err
	}

	*o = ModelVulnerabilityRule(varModelVulnerabilityRule)

	return err
}

type NullableModelVulnerabilityRule struct {
	value *ModelVulnerabilityRule
	isSet bool
}

func (v NullableModelVulnerabilityRule) Get() *ModelVulnerabilityRule {
	return v.value
}

func (v *NullableModelVulnerabilityRule) Set(val *ModelVulnerabilityRule) {
	v.value = val
	v.isSet = true
}

func (v NullableModelVulnerabilityRule) IsSet() bool {
	return v.isSet
}

func (v *NullableModelVulnerabilityRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelVulnerabilityRule(val *ModelVulnerabilityRule) *NullableModelVulnerabilityRule {
	return &NullableModelVulnerabilityRule{value: val, isSet: true}
}

func (v NullableModelVulnerabilityRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelVulnerabilityRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


